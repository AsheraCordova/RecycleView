//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\StaggeredGridLayoutManager.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AdapterHelper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LayoutState.h"
#include "OrientationHelper.h"
#include "Parcel.h"
#include "Parcelable.h"
#include "Rect.h"
#include "RecyclerView.h"
#include "ScrollbarHelper.h"
#include "StaggeredGridLayoutManager.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/List.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXStaggeredGridLayoutManager () {
 @public
  /*!
   @brief Number of spans
   */
  int32_t mSpanCount_;
  int32_t mOrientation_;
  /*!
   @brief The width or height per span, depending on the orientation.
   */
  int32_t mSizePerSpan_;
  ADXLayoutState *mLayoutState_;
  /*!
   @brief Temporary variable used during fill method to check which spans needs to be filled.
   */
  JavaUtilBitSet *mRemainingSpans_;
  /*!
   @brief how we handle gaps in UI.
   */
  int32_t mGapStrategy_;
  /*!
   @brief Saved state needs this information to properly layout on restore.
   */
  bool mLastLayoutFromEnd_;
  /*!
   @brief Saved state and onLayout needs this information to re-layout properly
   */
  bool mLastLayoutRTL_;
  /*!
   @brief SavedState is not handled until a layout happens.This is where we keep it until next
  layout.
   */
  ADXStaggeredGridLayoutManager_SavedState *mPendingSavedState_;
  /*!
   @brief Re-used measurement specs.updated by onLayout.
   */
  int32_t mFullSizeSpec_;
  /*!
   @brief Re-used rectangle to get child decor offsets.
   */
  ADRect *mTmpRect_;
  /*!
   @brief Re-used anchor info.
   */
  ADXStaggeredGridLayoutManager_AnchorInfo *mAnchorInfo_;
  /*!
   @brief If a full span item is invalid / or created in reverse direction; it may create gaps in
  the UI.While laying out, if such case is detected, we set this flag.
   <p>
  After scrolling stops, we check this flag and if it is set, re-layout.
   */
  bool mLaidOutInvalidFullSpan_;
  /*!
   @brief Works the same way as <code>r.android.widget.AbsListView.setSmoothScrollbarEnabled(boolean)</code>.
   see <code>r.android.widget.AbsListView.setSmoothScrollbarEnabled(boolean)</code>
   */
  bool mSmoothScrollbarEnabled_;
  /*!
   @brief Temporary array used (solely in <code>collectAdjacentPrefetchPositions</code>) for stashing and
  sorting distances to views being prefetched.
   */
  IOSIntArray *mPrefetchDistances_;
  id<JavaLangRunnable> mCheckForGapsRunnable_;
}

- (void)createOrientationHelpers;

- (bool)checkSpanForGapWithADXStaggeredGridLayoutManager_Span:(ADXStaggeredGridLayoutManager_Span *)span;

/*!
 @brief Calculates the views' layout order.
 (e.g. from end to start or start to end)
  RTL layout support is applied automatically. So if layout is RTL and 
 <code>getReverseLayout()</code> is <code>true</code>, elements will be laid out starting from left.
 */
- (void)resolveShouldLayoutReverse;

- (void)onLayoutChildrenWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                           withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                         withBoolean:(bool)shouldCheckForGaps;

- (void)repositionToWrapContentIfNecessary;

- (void)applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo:(ADXStaggeredGridLayoutManager_AnchorInfo *)anchorInfo;

- (bool)updateAnchorFromChildrenWithADXRecyclerView_State:(ADXRecyclerView_State *)state
             withADXStaggeredGridLayoutManager_AnchorInfo:(ADXStaggeredGridLayoutManager_AnchorInfo *)anchorInfo;

- (int32_t)computeScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state;

- (int32_t)computeScrollExtentWithADXRecyclerView_State:(ADXRecyclerView_State *)state;

- (int32_t)computeScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state;

- (void)measureChildWithDecorationsAndMarginWithADView:(ADView *)child
        withADXStaggeredGridLayoutManager_LayoutParams:(ADXStaggeredGridLayoutManager_LayoutParams *)lp
                                           withBoolean:(bool)alreadyMeasured;

- (void)measureChildWithDecorationsAndMarginWithADView:(ADView *)child
                                               withInt:(int32_t)widthSpec
                                               withInt:(int32_t)heightSpec
                                           withBoolean:(bool)alreadyMeasured;

- (int32_t)updateSpecWithExtraWithInt:(int32_t)spec
                              withInt:(int32_t)startInset
                              withInt:(int32_t)endInset;

- (void)fixEndGapWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                    withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                  withBoolean:(bool)canOffsetChildren;

- (void)fixStartGapWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                    withBoolean:(bool)canOffsetChildren;

- (void)updateLayoutStateWithInt:(int32_t)anchorPosition
       withADXRecyclerView_State:(ADXRecyclerView_State *)state;

- (void)setLayoutStateDirectionWithInt:(int32_t)direction;

/*!
 @brief Checks whether it should invalidate span assignments in response to an adapter change.
 */
- (void)handleUpdateWithInt:(int32_t)positionStart
                    withInt:(int32_t)itemCountOrToPosition
                    withInt:(int32_t)cmd;

- (int32_t)fillWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                         withADXLayoutState:(ADXLayoutState *)layoutState
                  withADXRecyclerView_State:(ADXRecyclerView_State *)state;

- (ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)createFullSpanItemFromEndWithInt:(int32_t)newItemTop;

- (ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)createFullSpanItemFromStartWithInt:(int32_t)newItemBottom;

- (void)attachViewToSpansWithADView:(ADView *)view
withADXStaggeredGridLayoutManager_LayoutParams:(ADXStaggeredGridLayoutManager_LayoutParams *)lp
                 withADXLayoutState:(ADXLayoutState *)layoutState;

- (void)recycleWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                         withADXLayoutState:(ADXLayoutState *)layoutState;

- (void)appendViewToAllSpansWithADView:(ADView *)view;

- (void)prependViewToAllSpansWithADView:(ADView *)view;

- (void)updateAllRemainingSpansWithInt:(int32_t)layoutDir
                               withInt:(int32_t)targetLine;

- (void)updateRemainingSpansWithADXStaggeredGridLayoutManager_Span:(ADXStaggeredGridLayoutManager_Span *)span
                                                           withInt:(int32_t)layoutDir
                                                           withInt:(int32_t)targetLine;

- (int32_t)getMaxStartWithInt:(int32_t)def;

- (int32_t)getMinStartWithInt:(int32_t)def;

- (int32_t)getMaxEndWithInt:(int32_t)def;

- (int32_t)getMinEndWithInt:(int32_t)def;

- (void)recycleFromStartWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                             withInt:(int32_t)line;

- (void)recycleFromEndWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                           withInt:(int32_t)line;

/*!
 @return True if last span is the first one we want to fill
 */
- (bool)preferLastSpanWithInt:(int32_t)layoutDir;

/*!
 @brief Finds the span for the next view.
 */
- (ADXStaggeredGridLayoutManager_Span *)getNextSpanWithADXLayoutState:(ADXLayoutState *)layoutState;

- (int32_t)calculateScrollDirectionForPositionWithInt:(int32_t)position;

/*!
 @brief Finds the first View that can be used as an anchor View.
 @return Position of the View or 0 if it cannot find any such View.
 */
- (int32_t)findFirstReferenceChildPositionWithInt:(int32_t)itemCount;

/*!
 @brief Finds the last View that can be used as an anchor View.
 @return Position of the View or 0 if it cannot find any such View.
 */
- (int32_t)findLastReferenceChildPositionWithInt:(int32_t)itemCount;

/*!
 @brief Converts a focusDirection to orientation.
 @param focusDirection One of <code>View.FOCUS_UP</code> , <code>View.FOCUS_DOWN</code> ,
                         <code>View.FOCUS_LEFT</code> , <code>View.FOCUS_RIGHT</code> ,                        
 <code>View.FOCUS_BACKWARD</code> , <code>View.FOCUS_FORWARD</code>                        or 0 for not applicable
 @return <code>LayoutState.LAYOUT_START</code> or <code>LayoutState.LAYOUT_END</code> if focus direction
  is applicable to current state, <code>LayoutState.INVALID_LAYOUT</code> otherwise.
 */
- (int32_t)convertFocusDirectionToLayoutDirectionWithInt:(int32_t)focusDirection;

@end

J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mLayoutState_, ADXLayoutState *)
J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mRemainingSpans_, JavaUtilBitSet *)
J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mPendingSavedState_, ADXStaggeredGridLayoutManager_SavedState *)
J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mTmpRect_, ADRect *)
J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mAnchorInfo_, ADXStaggeredGridLayoutManager_AnchorInfo *)
J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mPrefetchDistances_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXStaggeredGridLayoutManager, mCheckForGapsRunnable_, id<JavaLangRunnable>)

inline NSString *ADXStaggeredGridLayoutManager_get_TAG(void);
static NSString *ADXStaggeredGridLayoutManager_TAG = @"StaggeredGridLManager";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXStaggeredGridLayoutManager, TAG, NSString *)

/*!
 @brief While trying to find next view to focus, LayoutManager will not try to scroll more
  than this factor times the total space of the list.If layout is vertical, total space is the
  height minus padding, if layout is horizontal, total space is the width minus padding.
 */
inline float ADXStaggeredGridLayoutManager_get_MAX_SCROLL_FACTOR(void);
#define ADXStaggeredGridLayoutManager_MAX_SCROLL_FACTOR 0.33333334f
J2OBJC_STATIC_FIELD_CONSTANT(ADXStaggeredGridLayoutManager, MAX_SCROLL_FACTOR, float)

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_createOrientationHelpers(ADXStaggeredGridLayoutManager *self);

__attribute__((unused)) static bool ADXStaggeredGridLayoutManager_checkSpanForGapWithADXStaggeredGridLayoutManager_Span_(ADXStaggeredGridLayoutManager *self, ADXStaggeredGridLayoutManager_Span *span);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_resolveShouldLayoutReverse(ADXStaggeredGridLayoutManager *self);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_onLayoutChildrenWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, bool shouldCheckForGaps);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_repositionToWrapContentIfNecessary(ADXStaggeredGridLayoutManager *self);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo_(ADXStaggeredGridLayoutManager *self, ADXStaggeredGridLayoutManager_AnchorInfo *anchorInfo);

__attribute__((unused)) static bool ADXStaggeredGridLayoutManager_updateAnchorFromChildrenWithADXRecyclerView_State_withADXStaggeredGridLayoutManager_AnchorInfo_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state, ADXStaggeredGridLayoutManager_AnchorInfo *anchorInfo);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_computeScrollOffsetWithADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_computeScrollExtentWithADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_computeScrollRangeWithADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withBoolean_(ADXStaggeredGridLayoutManager *self, ADView *child, ADXStaggeredGridLayoutManager_LayoutParams *lp, bool alreadyMeasured);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(ADXStaggeredGridLayoutManager *self, ADView *child, int32_t widthSpec, int32_t heightSpec, bool alreadyMeasured);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_updateSpecWithExtraWithInt_withInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t spec, int32_t startInset, int32_t endInset);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_fixEndGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, bool canOffsetChildren);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_fixStartGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, bool canOffsetChildren);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_updateLayoutStateWithInt_withADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, int32_t anchorPosition, ADXRecyclerView_State *state);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t direction);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t positionStart, int32_t itemCountOrToPosition, int32_t cmd);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXLayoutState *layoutState, ADXRecyclerView_State *state);

__attribute__((unused)) static ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *ADXStaggeredGridLayoutManager_createFullSpanItemFromEndWithInt_(ADXStaggeredGridLayoutManager *self, int32_t newItemTop);

__attribute__((unused)) static ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *ADXStaggeredGridLayoutManager_createFullSpanItemFromStartWithInt_(ADXStaggeredGridLayoutManager *self, int32_t newItemBottom);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_attachViewToSpansWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withADXLayoutState_(ADXStaggeredGridLayoutManager *self, ADView *view, ADXStaggeredGridLayoutManager_LayoutParams *lp, ADXLayoutState *layoutState);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_recycleWithADXRecyclerView_Recycler_withADXLayoutState_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXLayoutState *layoutState);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_appendViewToAllSpansWithADView_(ADXStaggeredGridLayoutManager *self, ADView *view);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_prependViewToAllSpansWithADView_(ADXStaggeredGridLayoutManager *self, ADView *view);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_updateAllRemainingSpansWithInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t layoutDir, int32_t targetLine);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_updateRemainingSpansWithADXStaggeredGridLayoutManager_Span_withInt_withInt_(ADXStaggeredGridLayoutManager *self, ADXStaggeredGridLayoutManager_Span *span, int32_t layoutDir, int32_t targetLine);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_getMaxStartWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_getMinStartWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_getMaxEndWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_getMinEndWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_recycleFromStartWithADXRecyclerView_Recycler_withInt_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, int32_t line);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_recycleFromEndWithADXRecyclerView_Recycler_withInt_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, int32_t line);

__attribute__((unused)) static bool ADXStaggeredGridLayoutManager_preferLastSpanWithInt_(ADXStaggeredGridLayoutManager *self, int32_t layoutDir);

__attribute__((unused)) static ADXStaggeredGridLayoutManager_Span *ADXStaggeredGridLayoutManager_getNextSpanWithADXLayoutState_(ADXStaggeredGridLayoutManager *self, ADXLayoutState *layoutState);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_calculateScrollDirectionForPositionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t position);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_findFirstReferenceChildPositionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t itemCount);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_findLastReferenceChildPositionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t itemCount);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_convertFocusDirectionToLayoutDirectionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t focusDirection);

@interface ADXStaggeredGridLayoutManager_1 : NSObject < JavaLangRunnable > {
 @public
  ADXStaggeredGridLayoutManager *this$0_;
}

- (instancetype)initWithADXStaggeredGridLayoutManager:(ADXStaggeredGridLayoutManager *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXStaggeredGridLayoutManager_1)

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager_1 *self, ADXStaggeredGridLayoutManager *outer$);

__attribute__((unused)) static ADXStaggeredGridLayoutManager_1 *new_ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXStaggeredGridLayoutManager_1 *create_ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager *outer$);


@interface ADXStaggeredGridLayoutManager_Span () {
 @public
  ADXStaggeredGridLayoutManager *this$0_;
}

@end

@interface ADXStaggeredGridLayoutManager_LazySpanLookup ()

- (void)offsetFullSpansForRemovalWithInt:(int32_t)positionStart
                                 withInt:(int32_t)itemCount;

- (void)offsetFullSpansForAdditionWithInt:(int32_t)positionStart
                                  withInt:(int32_t)itemCount;

/*!
 @brief Returns when invalidation should end.e.g. hitting a full span position.
 Returned position SHOULD BE invalidated.
 */
- (int32_t)invalidateFullSpansAfterWithInt:(int32_t)position;

@end

inline int32_t ADXStaggeredGridLayoutManager_LazySpanLookup_get_MIN_SIZE(void);
#define ADXStaggeredGridLayoutManager_LazySpanLookup_MIN_SIZE 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXStaggeredGridLayoutManager_LazySpanLookup, MIN_SIZE, int32_t)

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForRemovalWithInt_withInt_(ADXStaggeredGridLayoutManager_LazySpanLookup *self, int32_t positionStart, int32_t itemCount);

__attribute__((unused)) static void ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForAdditionWithInt_withInt_(ADXStaggeredGridLayoutManager_LazySpanLookup *self, int32_t positionStart, int32_t itemCount);

__attribute__((unused)) static int32_t ADXStaggeredGridLayoutManager_LazySpanLookup_invalidateFullSpansAfterWithInt_(ADXStaggeredGridLayoutManager_LazySpanLookup *self, int32_t position);

@interface ADXStaggeredGridLayoutManager_AnchorInfo () {
 @public
  ADXStaggeredGridLayoutManager *this$0_;
}

@end

@implementation ADXStaggeredGridLayoutManager

- (instancetype)initWithInt:(int32_t)spanCount
                    withInt:(int32_t)orientation {
  ADXStaggeredGridLayoutManager_initWithInt_withInt_(self, spanCount, orientation);
  return self;
}

- (bool)isAutoMeasureEnabled {
  return mGapStrategy_ != ADXStaggeredGridLayoutManager_GAP_HANDLING_NONE;
}

- (void)createOrientationHelpers {
  ADXStaggeredGridLayoutManager_createOrientationHelpers(self);
}

- (bool)checkForGaps {
  if ([self getChildCount] == 0 || mGapStrategy_ == ADXStaggeredGridLayoutManager_GAP_HANDLING_NONE || ![self isAttachedToWindow]) {
    return false;
  }
  int32_t minPos;
  int32_t maxPos;
  if (mShouldReverseLayout_) {
    minPos = [self getLastChildPosition];
    maxPos = [self getFirstChildPosition];
  }
  else {
    minPos = [self getFirstChildPosition];
    maxPos = [self getLastChildPosition];
  }
  if (minPos == 0) {
    ADView *gapView = JreRetainedLocalValue([self hasGapsToFix]);
    if (gapView != nil) {
      [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) clear];
      [self requestSimpleAnimationsInNextLayout];
      [self requestLayout];
      return true;
    }
  }
  if (!mLaidOutInvalidFullSpan_) {
    return false;
  }
  int32_t invalidGapDir = mShouldReverseLayout_ ? ADXLayoutState_LAYOUT_START : ADXLayoutState_LAYOUT_END;
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *invalidFsi = [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) getFirstFullSpanItemInRangeWithInt:minPos withInt:maxPos + 1 withInt:invalidGapDir withBoolean:true];
  if (invalidFsi == nil) {
    mLaidOutInvalidFullSpan_ = false;
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) forceInvalidateAfterWithInt:maxPos + 1];
    return false;
  }
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *validFsi = [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) getFirstFullSpanItemInRangeWithInt:minPos withInt:invalidFsi->mPosition_ withInt:invalidGapDir * -1 withBoolean:true];
  if (validFsi == nil) {
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) forceInvalidateAfterWithInt:invalidFsi->mPosition_];
  }
  else {
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) forceInvalidateAfterWithInt:validFsi->mPosition_ + 1];
  }
  [self requestSimpleAnimationsInNextLayout];
  [self requestLayout];
  return true;
}

- (void)onScrollStateChangedWithInt:(int32_t)state {
  if (state == ADXRecyclerView_SCROLL_STATE_IDLE) {
    [self checkForGaps];
  }
}

- (void)onDetachedFromWindowWithADXRecyclerView:(ADXRecyclerView *)view
                   withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  [super onDetachedFromWindowWithADXRecyclerView:view withADXRecyclerView_Recycler:recycler];
  [self removeCallbacksWithJavaLangRunnable:mCheckForGapsRunnable_];
  for (int32_t i = 0; i < mSpanCount_; i++) {
    [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) clear];
  }
  [((ADXRecyclerView *) nil_chk(view)) requestLayout];
}

- (ADView *)hasGapsToFix {
  int32_t startChildIndex = 0;
  int32_t endChildIndex = [self getChildCount] - 1;
  JavaUtilBitSet *mSpansToCheck = create_JavaUtilBitSet_initWithInt_(mSpanCount_);
  [mSpansToCheck setWithInt:0 withInt:mSpanCount_ withBoolean:true];
  int32_t firstChildIndex;
  int32_t childLimit;
  int32_t preferredSpanDir = mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL && [self isLayoutRTL] ? 1 : -1;
  if (mShouldReverseLayout_) {
    firstChildIndex = endChildIndex;
    childLimit = startChildIndex - 1;
  }
  else {
    firstChildIndex = startChildIndex;
    childLimit = endChildIndex + 1;
  }
  int32_t nextChildDiff = firstChildIndex < childLimit ? 1 : -1;
  for (int32_t i = firstChildIndex; i != childLimit; i += nextChildDiff) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXStaggeredGridLayoutManager_LayoutParams *lp = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
    if ([mSpansToCheck getWithInt:((ADXStaggeredGridLayoutManager_Span *) nil_chk(((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpan_))->mIndex_]) {
      if (ADXStaggeredGridLayoutManager_checkSpanForGapWithADXStaggeredGridLayoutManager_Span_(self, lp->mSpan_)) {
        return child;
      }
      [mSpansToCheck clearWithInt:((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_))->mIndex_];
    }
    if (lp->mFullSpan_) {
      continue;
    }
    if (i + nextChildDiff != childLimit) {
      ADView *nextChild = JreRetainedLocalValue([self getChildAtWithInt:i + nextChildDiff]);
      bool compareSpans = false;
      if (mShouldReverseLayout_) {
        int32_t myEnd = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedEndWithADView:child];
        int32_t nextEnd = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedEndWithADView:nextChild];
        if (myEnd < nextEnd) {
          return child;
        }
        else if (myEnd == nextEnd) {
          compareSpans = true;
        }
      }
      else {
        int32_t myStart = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedStartWithADView:child];
        int32_t nextStart = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedStartWithADView:nextChild];
        if (myStart > nextStart) {
          return child;
        }
        else if (myStart == nextStart) {
          compareSpans = true;
        }
      }
      if (compareSpans) {
        ADXStaggeredGridLayoutManager_LayoutParams *nextLp = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(nextChild)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
        if (((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_))->mIndex_ - ((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(nextLp))->mSpan_->mIndex_ < 0 != preferredSpanDir < 0) {
          return child;
        }
      }
    }
  }
  return nil;
}

- (bool)checkSpanForGapWithADXStaggeredGridLayoutManager_Span:(ADXStaggeredGridLayoutManager_Span *)span {
  return ADXStaggeredGridLayoutManager_checkSpanForGapWithADXStaggeredGridLayoutManager_Span_(self, span);
}

- (void)setSpanCountWithInt:(int32_t)spanCount {
  [self assertNotInLayoutOrScrollWithNSString:nil];
  if (spanCount != mSpanCount_) {
    [self invalidateSpanAssignments];
    mSpanCount_ = spanCount;
    JreStrongAssignAndConsume(&mRemainingSpans_, new_JavaUtilBitSet_initWithInt_(mSpanCount_));
    JreStrongAssignAndConsume(&mSpans_, [IOSObjectArray newArrayWithLength:mSpanCount_ type:ADXStaggeredGridLayoutManager_Span_class_()]);
    for (int32_t i = 0; i < mSpanCount_; i++) {
      IOSObjectArray_SetAndConsume(nil_chk(mSpans_), i, new_ADXStaggeredGridLayoutManager_Span_initWithADXStaggeredGridLayoutManager_withInt_(self, i));
    }
    [self requestLayout];
  }
}

- (void)setOrientationWithInt:(int32_t)orientation {
  if (orientation != ADXStaggeredGridLayoutManager_HORIZONTAL && orientation != ADXStaggeredGridLayoutManager_VERTICAL) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid orientation.");
  }
  [self assertNotInLayoutOrScrollWithNSString:nil];
  if (orientation == mOrientation_) {
    return;
  }
  mOrientation_ = orientation;
  ADXOrientationHelper *tmp = JreRetainedLocalValue(mPrimaryOrientation_);
  JreStrongAssign(&mPrimaryOrientation_, mSecondaryOrientation_);
  JreStrongAssign(&mSecondaryOrientation_, tmp);
  [self requestLayout];
}

- (void)setReverseLayoutWithBoolean:(bool)reverseLayout {
  [self assertNotInLayoutOrScrollWithNSString:nil];
  if (mPendingSavedState_ != nil && mPendingSavedState_->mReverseLayout_ != reverseLayout) {
    mPendingSavedState_->mReverseLayout_ = reverseLayout;
  }
  mReverseLayout_ = reverseLayout;
  [self requestLayout];
}

- (int32_t)getGapStrategy {
  return mGapStrategy_;
}

- (void)setGapStrategyWithInt:(int32_t)gapStrategy {
  [self assertNotInLayoutOrScrollWithNSString:nil];
  if (gapStrategy == mGapStrategy_) {
    return;
  }
  if (gapStrategy != ADXStaggeredGridLayoutManager_GAP_HANDLING_NONE && gapStrategy != ADXStaggeredGridLayoutManager_GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid gap strategy. Must be GAP_HANDLING_NONE or GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS");
  }
  mGapStrategy_ = gapStrategy;
  [self requestLayout];
}

- (void)assertNotInLayoutOrScrollWithNSString:(NSString *)message {
  if (mPendingSavedState_ == nil) {
    [super assertNotInLayoutOrScrollWithNSString:message];
  }
}

- (int32_t)getSpanCount {
  return mSpanCount_;
}

- (void)invalidateSpanAssignments {
  [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) clear];
  [self requestLayout];
}

- (void)resolveShouldLayoutReverse {
  ADXStaggeredGridLayoutManager_resolveShouldLayoutReverse(self);
}

- (bool)isLayoutRTL {
  return [self getLayoutDirection] == ADXViewCompat_LAYOUT_DIRECTION_RTL;
}

- (bool)getReverseLayout {
  return mReverseLayout_;
}

- (void)setMeasuredDimensionWithADRect:(ADRect *)childrenBounds
                               withInt:(int32_t)wSpec
                               withInt:(int32_t)hSpec {
  int32_t width;
  int32_t height;
  int32_t horizontalPadding = [self getPaddingLeft] + [self getPaddingRight];
  int32_t verticalPadding = [self getPaddingTop] + [self getPaddingBottom];
  if (mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
    int32_t usedHeight = [((ADRect *) nil_chk(childrenBounds)) height] + verticalPadding;
    height = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(hSpec, usedHeight, [self getMinimumHeight]);
    width = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(wSpec, mSizePerSpan_ * mSpanCount_ + horizontalPadding, [self getMinimumWidth]);
  }
  else {
    int32_t usedWidth = [((ADRect *) nil_chk(childrenBounds)) width] + horizontalPadding;
    width = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(wSpec, usedWidth, [self getMinimumWidth]);
    height = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(hSpec, mSizePerSpan_ * mSpanCount_ + verticalPadding, [self getMinimumHeight]);
  }
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (void)onLayoutChildrenWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                           withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADXStaggeredGridLayoutManager_onLayoutChildrenWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, true);
}

- (void)onAdapterChangedWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)oldAdapter
                        withADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)newAdapter {
  [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) clear];
  for (int32_t i = 0; i < mSpanCount_; i++) {
    [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) clear];
  }
}

- (void)onLayoutChildrenWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                           withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                         withBoolean:(bool)shouldCheckForGaps {
  ADXStaggeredGridLayoutManager_onLayoutChildrenWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, shouldCheckForGaps);
}

- (void)onLayoutCompletedWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  [super onLayoutCompletedWithADXRecyclerView_State:state];
  mPendingScrollPosition_ = ADXRecyclerView_NO_POSITION;
  mPendingScrollPositionOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
  JreStrongAssign(&mPendingSavedState_, nil);
  [((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(mAnchorInfo_)) reset];
}

- (void)repositionToWrapContentIfNecessary {
  ADXStaggeredGridLayoutManager_repositionToWrapContentIfNecessary(self);
}

- (void)applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo:(ADXStaggeredGridLayoutManager_AnchorInfo *)anchorInfo {
  ADXStaggeredGridLayoutManager_applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo_(self, anchorInfo);
}

- (void)updateAnchorInfoForLayoutWithADXRecyclerView_State:(ADXRecyclerView_State *)state
              withADXStaggeredGridLayoutManager_AnchorInfo:(ADXStaggeredGridLayoutManager_AnchorInfo *)anchorInfo {
  if ([self updateAnchorFromPendingDataWithADXRecyclerView_State:state withADXStaggeredGridLayoutManager_AnchorInfo:anchorInfo]) {
    return;
  }
  if (ADXStaggeredGridLayoutManager_updateAnchorFromChildrenWithADXRecyclerView_State_withADXStaggeredGridLayoutManager_AnchorInfo_(self, state, anchorInfo)) {
    return;
  }
  [((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo)) assignCoordinateFromPadding];
  anchorInfo->mPosition_ = 0;
}

- (bool)updateAnchorFromChildrenWithADXRecyclerView_State:(ADXRecyclerView_State *)state
             withADXStaggeredGridLayoutManager_AnchorInfo:(ADXStaggeredGridLayoutManager_AnchorInfo *)anchorInfo {
  return ADXStaggeredGridLayoutManager_updateAnchorFromChildrenWithADXRecyclerView_State_withADXStaggeredGridLayoutManager_AnchorInfo_(self, state, anchorInfo);
}

- (bool)updateAnchorFromPendingDataWithADXRecyclerView_State:(ADXRecyclerView_State *)state
                withADXStaggeredGridLayoutManager_AnchorInfo:(ADXStaggeredGridLayoutManager_AnchorInfo *)anchorInfo {
  if ([((ADXRecyclerView_State *) nil_chk(state)) isPreLayout] || mPendingScrollPosition_ == ADXRecyclerView_NO_POSITION) {
    return false;
  }
  if (mPendingScrollPosition_ < 0 || mPendingScrollPosition_ >= [state getItemCount]) {
    mPendingScrollPosition_ = ADXRecyclerView_NO_POSITION;
    mPendingScrollPositionOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
    return false;
  }
  if (mPendingSavedState_ == nil || mPendingSavedState_->mAnchorPosition_ == ADXRecyclerView_NO_POSITION || mPendingSavedState_->mSpanOffsetsSize_ < 1) {
    ADView *child = [self findViewByPositionWithInt:mPendingScrollPosition_];
    if (child != nil) {
      ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mPosition_ = mShouldReverseLayout_ ? [self getLastChildPosition] : [self getFirstChildPosition];
      if (mPendingScrollPositionOffset_ != ADXStaggeredGridLayoutManager_INVALID_OFFSET) {
        if (anchorInfo->mLayoutFromEnd_) {
          int32_t target = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getEndAfterPadding] - mPendingScrollPositionOffset_;
          anchorInfo->mOffset_ = target - [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedEndWithADView:child];
        }
        else {
          int32_t target = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getStartAfterPadding] + mPendingScrollPositionOffset_;
          anchorInfo->mOffset_ = target - [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedStartWithADView:child];
        }
        return true;
      }
      int32_t childSize = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedMeasurementWithADView:child];
      if (childSize > [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getTotalSpace]) {
        anchorInfo->mOffset_ = anchorInfo->mLayoutFromEnd_ ? [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getEndAfterPadding] : [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getStartAfterPadding];
        return true;
      }
      int32_t startGap = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedStartWithADView:child] - [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getStartAfterPadding];
      if (startGap < 0) {
        anchorInfo->mOffset_ = -startGap;
        return true;
      }
      int32_t endGap = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getEndAfterPadding] - [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedEndWithADView:child];
      if (endGap < 0) {
        anchorInfo->mOffset_ = endGap;
        return true;
      }
      anchorInfo->mOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
    }
    else {
      ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mPosition_ = mPendingScrollPosition_;
      if (mPendingScrollPositionOffset_ == ADXStaggeredGridLayoutManager_INVALID_OFFSET) {
        int32_t position = ADXStaggeredGridLayoutManager_calculateScrollDirectionForPositionWithInt_(self, anchorInfo->mPosition_);
        anchorInfo->mLayoutFromEnd_ = (position == ADXLayoutState_LAYOUT_END);
        [anchorInfo assignCoordinateFromPadding];
      }
      else {
        [anchorInfo assignCoordinateFromPaddingWithInt:mPendingScrollPositionOffset_];
      }
      anchorInfo->mInvalidateOffsets_ = true;
    }
  }
  else {
    ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
    anchorInfo->mPosition_ = mPendingScrollPosition_;
  }
  return true;
}

- (void)updateMeasureSpecsWithInt:(int32_t)totalSpace {
  mSizePerSpan_ = JreIntDiv(totalSpace, mSpanCount_);
  mFullSizeSpec_ = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(totalSpace, [((ADXOrientationHelper *) nil_chk(mSecondaryOrientation_)) getMode]);
}

- (bool)supportsPredictiveItemAnimations {
  return mPendingSavedState_ == nil;
}

- (IOSIntArray *)findFirstVisibleItemPositionsWithIntArray:(IOSIntArray *)into {
  if (into == nil) {
    into = [IOSIntArray arrayWithLength:mSpanCount_];
  }
  else if (into->size_ < mSpanCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Provided int[]'s size must be more than or equal to span count. Expected:", mSpanCount_, @", array size:", into->size_));
  }
  for (int32_t i = 0; i < mSpanCount_; i++) {
    *IOSIntArray_GetRef(into, i) = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findFirstVisibleItemPosition];
  }
  return into;
}

- (IOSIntArray *)findFirstCompletelyVisibleItemPositionsWithIntArray:(IOSIntArray *)into {
  if (into == nil) {
    into = [IOSIntArray arrayWithLength:mSpanCount_];
  }
  else if (into->size_ < mSpanCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Provided int[]'s size must be more than or equal to span count. Expected:", mSpanCount_, @", array size:", into->size_));
  }
  for (int32_t i = 0; i < mSpanCount_; i++) {
    *IOSIntArray_GetRef(into, i) = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findFirstCompletelyVisibleItemPosition];
  }
  return into;
}

- (IOSIntArray *)findLastVisibleItemPositionsWithIntArray:(IOSIntArray *)into {
  if (into == nil) {
    into = [IOSIntArray arrayWithLength:mSpanCount_];
  }
  else if (into->size_ < mSpanCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Provided int[]'s size must be more than or equal to span count. Expected:", mSpanCount_, @", array size:", into->size_));
  }
  for (int32_t i = 0; i < mSpanCount_; i++) {
    *IOSIntArray_GetRef(into, i) = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findLastVisibleItemPosition];
  }
  return into;
}

- (IOSIntArray *)findLastCompletelyVisibleItemPositionsWithIntArray:(IOSIntArray *)into {
  if (into == nil) {
    into = [IOSIntArray arrayWithLength:mSpanCount_];
  }
  else if (into->size_ < mSpanCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Provided int[]'s size must be more than or equal to span count. Expected:", mSpanCount_, @", array size:", into->size_));
  }
  for (int32_t i = 0; i < mSpanCount_; i++) {
    *IOSIntArray_GetRef(into, i) = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findLastCompletelyVisibleItemPosition];
  }
  return into;
}

- (int32_t)computeHorizontalScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollOffsetWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollOffsetWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeVerticalScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollOffsetWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeHorizontalScrollExtentWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollExtentWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeScrollExtentWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollExtentWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeVerticalScrollExtentWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollExtentWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeHorizontalScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollRangeWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollRangeWithADXRecyclerView_State_(self, state);
}

- (int32_t)computeVerticalScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_computeScrollRangeWithADXRecyclerView_State_(self, state);
}

- (void)measureChildWithDecorationsAndMarginWithADView:(ADView *)child
        withADXStaggeredGridLayoutManager_LayoutParams:(ADXStaggeredGridLayoutManager_LayoutParams *)lp
                                           withBoolean:(bool)alreadyMeasured {
  ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withBoolean_(self, child, lp, alreadyMeasured);
}

- (void)measureChildWithDecorationsAndMarginWithADView:(ADView *)child
                                               withInt:(int32_t)widthSpec
                                               withInt:(int32_t)heightSpec
                                           withBoolean:(bool)alreadyMeasured {
  ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, child, widthSpec, heightSpec, alreadyMeasured);
}

- (int32_t)updateSpecWithExtraWithInt:(int32_t)spec
                              withInt:(int32_t)startInset
                              withInt:(int32_t)endInset {
  return ADXStaggeredGridLayoutManager_updateSpecWithExtraWithInt_withInt_withInt_(self, spec, startInset, endInset);
}

- (void)onRestoreInstanceStateWithADParcelable:(id<ADParcelable>)state {
  if ([state isKindOfClass:[ADXStaggeredGridLayoutManager_SavedState class]]) {
    JreStrongAssign(&mPendingSavedState_, (ADXStaggeredGridLayoutManager_SavedState *) state);
    if (mPendingScrollPosition_ != ADXRecyclerView_NO_POSITION) {
      [((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(mPendingSavedState_)) invalidateAnchorPositionInfo];
      [((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(mPendingSavedState_)) invalidateSpanInfo];
    }
    [self requestLayout];
  }
}

- (id<ADParcelable>)onSaveInstanceState {
  if (mPendingSavedState_ != nil) {
    return create_ADXStaggeredGridLayoutManager_SavedState_initWithADXStaggeredGridLayoutManager_SavedState_(mPendingSavedState_);
  }
  ADXStaggeredGridLayoutManager_SavedState *state = create_ADXStaggeredGridLayoutManager_SavedState_init();
  state->mReverseLayout_ = mReverseLayout_;
  state->mAnchorLayoutFromEnd_ = mLastLayoutFromEnd_;
  state->mLastLayoutRTL_ = mLastLayoutRTL_;
  if (mLazySpanLookup_ != nil && mLazySpanLookup_->mData_ != nil) {
    JreStrongAssign(&state->mSpanLookup_, mLazySpanLookup_->mData_);
    state->mSpanLookupSize_ = state->mSpanLookup_->size_;
    JreStrongAssign(&state->mFullSpanItems_, mLazySpanLookup_->mFullSpanItems_);
  }
  else {
    state->mSpanLookupSize_ = 0;
  }
  if ([self getChildCount] > 0) {
    state->mAnchorPosition_ = mLastLayoutFromEnd_ ? [self getLastChildPosition] : [self getFirstChildPosition];
    state->mVisibleAnchorPosition_ = [self findFirstVisibleItemPositionInt];
    state->mSpanOffsetsSize_ = mSpanCount_;
    JreStrongAssignAndConsume(&state->mSpanOffsets_, [IOSIntArray newArrayWithLength:mSpanCount_]);
    for (int32_t i = 0; i < mSpanCount_; i++) {
      int32_t line;
      if (mLastLayoutFromEnd_) {
        line = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getEndLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
        if (line != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
          line -= [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getEndAfterPadding];
        }
      }
      else {
        line = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getStartLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
        if (line != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
          line -= [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getStartAfterPadding];
        }
      }
      *IOSIntArray_GetRef(nil_chk(state->mSpanOffsets_), i) = line;
    }
  }
  else {
    state->mAnchorPosition_ = ADXRecyclerView_NO_POSITION;
    state->mVisibleAnchorPosition_ = ADXRecyclerView_NO_POSITION;
    state->mSpanOffsetsSize_ = 0;
  }
  return state;
}

- (int32_t)findFirstVisibleItemPositionInt {
  ADView *first = mShouldReverseLayout_ ? [self findFirstVisibleItemClosestToEndWithBoolean:true] : [self findFirstVisibleItemClosestToStartWithBoolean:true];
  return first == nil ? ADXRecyclerView_NO_POSITION : [self getPositionWithADView:first];
}

- (ADView *)findFirstVisibleItemClosestToStartWithBoolean:(bool)fullyVisible {
  int32_t boundsStart = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getStartAfterPadding];
  int32_t boundsEnd = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getEndAfterPadding];
  int32_t limit = [self getChildCount];
  ADView *partiallyVisible = nil;
  for (int32_t i = 0; i < limit; i++) {
    ADView *child = [self getChildAtWithInt:i];
    int32_t childStart = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedStartWithADView:child];
    int32_t childEnd = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedEndWithADView:child];
    if (childEnd <= boundsStart || childStart >= boundsEnd) {
      continue;
    }
    if (childStart >= boundsStart || !fullyVisible) {
      return child;
    }
    if (partiallyVisible == nil) {
      partiallyVisible = child;
    }
  }
  return partiallyVisible;
}

- (ADView *)findFirstVisibleItemClosestToEndWithBoolean:(bool)fullyVisible {
  int32_t boundsStart = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getStartAfterPadding];
  int32_t boundsEnd = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getEndAfterPadding];
  ADView *partiallyVisible = nil;
  for (int32_t i = [self getChildCount] - 1; i >= 0; i--) {
    ADView *child = [self getChildAtWithInt:i];
    int32_t childStart = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedStartWithADView:child];
    int32_t childEnd = [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getDecoratedEndWithADView:child];
    if (childEnd <= boundsStart || childStart >= boundsEnd) {
      continue;
    }
    if (childEnd <= boundsEnd || !fullyVisible) {
      return child;
    }
    if (partiallyVisible == nil) {
      partiallyVisible = child;
    }
  }
  return partiallyVisible;
}

- (void)fixEndGapWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                    withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                  withBoolean:(bool)canOffsetChildren {
  ADXStaggeredGridLayoutManager_fixEndGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, canOffsetChildren);
}

- (void)fixStartGapWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                    withBoolean:(bool)canOffsetChildren {
  ADXStaggeredGridLayoutManager_fixStartGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, canOffsetChildren);
}

- (void)updateLayoutStateWithInt:(int32_t)anchorPosition
       withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADXStaggeredGridLayoutManager_updateLayoutStateWithInt_withADXRecyclerView_State_(self, anchorPosition, state);
}

- (void)setLayoutStateDirectionWithInt:(int32_t)direction {
  ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, direction);
}

- (void)offsetChildrenHorizontalWithInt:(int32_t)dx {
  [super offsetChildrenHorizontalWithInt:dx];
  for (int32_t i = 0; i < mSpanCount_; i++) {
    [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) onOffsetWithInt:dx];
  }
}

- (void)offsetChildrenVerticalWithInt:(int32_t)dy {
  [super offsetChildrenVerticalWithInt:dy];
  for (int32_t i = 0; i < mSpanCount_; i++) {
    [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) onOffsetWithInt:dy];
  }
}

- (void)onItemsRemovedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(int32_t)positionStart
                                  withInt:(int32_t)itemCount {
  ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(self, positionStart, itemCount, ADXAdapterHelper_UpdateOp_REMOVE);
}

- (void)onItemsAddedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                withInt:(int32_t)positionStart
                                withInt:(int32_t)itemCount {
  ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(self, positionStart, itemCount, ADXAdapterHelper_UpdateOp_ADD);
}

- (void)onItemsChangedWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
  [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(mLazySpanLookup_)) clear];
  [self requestLayout];
}

- (void)onItemsMovedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                withInt:(int32_t)from
                                withInt:(int32_t)to
                                withInt:(int32_t)itemCount {
  ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(self, from, to, ADXAdapterHelper_UpdateOp_MOVE);
}

- (void)onItemsUpdatedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(int32_t)positionStart
                                  withInt:(int32_t)itemCount
                                   withId:(id)payload {
  ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(self, positionStart, itemCount, ADXAdapterHelper_UpdateOp_UPDATE);
}

- (void)handleUpdateWithInt:(int32_t)positionStart
                    withInt:(int32_t)itemCountOrToPosition
                    withInt:(int32_t)cmd {
  ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(self, positionStart, itemCountOrToPosition, cmd);
}

- (int32_t)fillWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                         withADXLayoutState:(ADXLayoutState *)layoutState
                  withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, layoutState, state);
}

- (ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)createFullSpanItemFromEndWithInt:(int32_t)newItemTop {
  return ADXStaggeredGridLayoutManager_createFullSpanItemFromEndWithInt_(self, newItemTop);
}

- (ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)createFullSpanItemFromStartWithInt:(int32_t)newItemBottom {
  return ADXStaggeredGridLayoutManager_createFullSpanItemFromStartWithInt_(self, newItemBottom);
}

- (void)attachViewToSpansWithADView:(ADView *)view
withADXStaggeredGridLayoutManager_LayoutParams:(ADXStaggeredGridLayoutManager_LayoutParams *)lp
                 withADXLayoutState:(ADXLayoutState *)layoutState {
  ADXStaggeredGridLayoutManager_attachViewToSpansWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withADXLayoutState_(self, view, lp, layoutState);
}

- (void)recycleWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                         withADXLayoutState:(ADXLayoutState *)layoutState {
  ADXStaggeredGridLayoutManager_recycleWithADXRecyclerView_Recycler_withADXLayoutState_(self, recycler, layoutState);
}

- (void)appendViewToAllSpansWithADView:(ADView *)view {
  ADXStaggeredGridLayoutManager_appendViewToAllSpansWithADView_(self, view);
}

- (void)prependViewToAllSpansWithADView:(ADView *)view {
  ADXStaggeredGridLayoutManager_prependViewToAllSpansWithADView_(self, view);
}

- (void)updateAllRemainingSpansWithInt:(int32_t)layoutDir
                               withInt:(int32_t)targetLine {
  ADXStaggeredGridLayoutManager_updateAllRemainingSpansWithInt_withInt_(self, layoutDir, targetLine);
}

- (void)updateRemainingSpansWithADXStaggeredGridLayoutManager_Span:(ADXStaggeredGridLayoutManager_Span *)span
                                                           withInt:(int32_t)layoutDir
                                                           withInt:(int32_t)targetLine {
  ADXStaggeredGridLayoutManager_updateRemainingSpansWithADXStaggeredGridLayoutManager_Span_withInt_withInt_(self, span, layoutDir, targetLine);
}

- (int32_t)getMaxStartWithInt:(int32_t)def {
  return ADXStaggeredGridLayoutManager_getMaxStartWithInt_(self, def);
}

- (int32_t)getMinStartWithInt:(int32_t)def {
  return ADXStaggeredGridLayoutManager_getMinStartWithInt_(self, def);
}

- (bool)areAllEndsEqual {
  int32_t end = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), 0))) getEndLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
  for (int32_t i = 1; i < mSpanCount_; i++) {
    if ([((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getEndLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE] != end) {
      return false;
    }
  }
  return true;
}

- (bool)areAllStartsEqual {
  int32_t start = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), 0))) getStartLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
  for (int32_t i = 1; i < mSpanCount_; i++) {
    if ([((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getStartLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE] != start) {
      return false;
    }
  }
  return true;
}

- (int32_t)getMaxEndWithInt:(int32_t)def {
  return ADXStaggeredGridLayoutManager_getMaxEndWithInt_(self, def);
}

- (int32_t)getMinEndWithInt:(int32_t)def {
  return ADXStaggeredGridLayoutManager_getMinEndWithInt_(self, def);
}

- (void)recycleFromStartWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                             withInt:(int32_t)line {
  ADXStaggeredGridLayoutManager_recycleFromStartWithADXRecyclerView_Recycler_withInt_(self, recycler, line);
}

- (void)recycleFromEndWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                           withInt:(int32_t)line {
  ADXStaggeredGridLayoutManager_recycleFromEndWithADXRecyclerView_Recycler_withInt_(self, recycler, line);
}

- (bool)preferLastSpanWithInt:(int32_t)layoutDir {
  return ADXStaggeredGridLayoutManager_preferLastSpanWithInt_(self, layoutDir);
}

- (ADXStaggeredGridLayoutManager_Span *)getNextSpanWithADXLayoutState:(ADXLayoutState *)layoutState {
  return ADXStaggeredGridLayoutManager_getNextSpanWithADXLayoutState_(self, layoutState);
}

- (bool)canScrollVertically {
  return mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL;
}

- (bool)canScrollHorizontally {
  return mOrientation_ == ADXStaggeredGridLayoutManager_HORIZONTAL;
}

- (int32_t)scrollHorizontallyByWithInt:(int32_t)dx
          withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
             withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return [self scrollByWithInt:dx withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
}

- (int32_t)scrollVerticallyByWithInt:(int32_t)dy
        withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
           withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return [self scrollByWithInt:dy withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
}

- (int32_t)calculateScrollDirectionForPositionWithInt:(int32_t)position {
  return ADXStaggeredGridLayoutManager_calculateScrollDirectionForPositionWithInt_(self, position);
}

- (void)scrollToPositionWithInt:(int32_t)position {
  if (mPendingSavedState_ != nil && mPendingSavedState_->mAnchorPosition_ != position) {
    [mPendingSavedState_ invalidateAnchorPositionInfo];
  }
  mPendingScrollPosition_ = position;
  mPendingScrollPositionOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
  [self requestLayout];
}

- (void)scrollToPositionWithOffsetWithInt:(int32_t)position
                                  withInt:(int32_t)offset {
  if (mPendingSavedState_ != nil) {
    [mPendingSavedState_ invalidateAnchorPositionInfo];
  }
  mPendingScrollPosition_ = position;
  mPendingScrollPositionOffset_ = offset;
  [self requestLayout];
}

- (void)collectAdjacentPrefetchPositionsWithInt:(int32_t)dx
                                        withInt:(int32_t)dy
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:(id<ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry>)layoutPrefetchRegistry {
  int32_t delta = (mOrientation_ == ADXStaggeredGridLayoutManager_HORIZONTAL) ? dx : dy;
  if ([self getChildCount] == 0 || delta == 0) {
    return;
  }
  [self prepareLayoutStateForDeltaWithInt:delta withADXRecyclerView_State:state];
  if (mPrefetchDistances_ == nil || mPrefetchDistances_->size_ < mSpanCount_) {
    JreStrongAssignAndConsume(&mPrefetchDistances_, [IOSIntArray newArrayWithLength:mSpanCount_]);
  }
  int32_t itemPrefetchCount = 0;
  for (int32_t i = 0; i < mSpanCount_; i++) {
    int32_t distance = ((ADXLayoutState *) nil_chk(mLayoutState_))->mItemDirection_ == ADXLayoutState_LAYOUT_START ? mLayoutState_->mStartLine_ - [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getStartLineWithInt:mLayoutState_->mStartLine_] : [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getEndLineWithInt:mLayoutState_->mEndLine_] - mLayoutState_->mEndLine_;
    if (distance >= 0) {
      *IOSIntArray_GetRef(nil_chk(mPrefetchDistances_), itemPrefetchCount) = distance;
      itemPrefetchCount++;
    }
  }
  JavaUtilArrays_sortWithIntArray_withInt_withInt_(mPrefetchDistances_, 0, itemPrefetchCount);
  for (int32_t i = 0; i < itemPrefetchCount && [((ADXLayoutState *) nil_chk(mLayoutState_)) hasMoreWithADXRecyclerView_State:state]; i++) {
    [((id<ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry>) nil_chk(layoutPrefetchRegistry)) addPositionWithInt:((ADXLayoutState *) nil_chk(mLayoutState_))->mCurrentPosition_ withInt:IOSIntArray_Get(nil_chk(mPrefetchDistances_), i)];
    mLayoutState_->mCurrentPosition_ += mLayoutState_->mItemDirection_;
  }
}

- (void)prepareLayoutStateForDeltaWithInt:(int32_t)delta
                withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  int32_t referenceChildPosition;
  int32_t layoutDir;
  if (delta > 0) {
    layoutDir = ADXLayoutState_LAYOUT_END;
    referenceChildPosition = [self getLastChildPosition];
  }
  else {
    layoutDir = ADXLayoutState_LAYOUT_START;
    referenceChildPosition = [self getFirstChildPosition];
  }
  ((ADXLayoutState *) nil_chk(mLayoutState_))->mRecycle_ = true;
  ADXStaggeredGridLayoutManager_updateLayoutStateWithInt_withADXRecyclerView_State_(self, referenceChildPosition, state);
  ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, layoutDir);
  mLayoutState_->mCurrentPosition_ = referenceChildPosition + mLayoutState_->mItemDirection_;
  mLayoutState_->mAvailable_ = JavaLangMath_absWithInt_(delta);
}

- (int32_t)scrollByWithInt:(int32_t)dt
withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
 withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if ([self getChildCount] == 0 || dt == 0) {
    return 0;
  }
  [self prepareLayoutStateForDeltaWithInt:dt withADXRecyclerView_State:state];
  int32_t consumed = ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, mLayoutState_, state);
  int32_t available = ((ADXLayoutState *) nil_chk(mLayoutState_))->mAvailable_;
  int32_t totalScroll;
  if (available < consumed) {
    totalScroll = dt;
  }
  else if (dt < 0) {
    totalScroll = -consumed;
  }
  else {
    totalScroll = consumed;
  }
  [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) offsetChildrenWithInt:-totalScroll];
  mLastLayoutFromEnd_ = mShouldReverseLayout_;
  mLayoutState_->mAvailable_ = 0;
  ADXStaggeredGridLayoutManager_recycleWithADXRecyclerView_Recycler_withADXLayoutState_(self, recycler, mLayoutState_);
  return totalScroll;
}

- (int32_t)getLastChildPosition {
  int32_t childCount = [self getChildCount];
  return childCount == 0 ? 0 : [self getPositionWithADView:[self getChildAtWithInt:childCount - 1]];
}

- (int32_t)getFirstChildPosition {
  int32_t childCount = [self getChildCount];
  return childCount == 0 ? 0 : [self getPositionWithADView:[self getChildAtWithInt:0]];
}

- (int32_t)findFirstReferenceChildPositionWithInt:(int32_t)itemCount {
  return ADXStaggeredGridLayoutManager_findFirstReferenceChildPositionWithInt_(self, itemCount);
}

- (int32_t)findLastReferenceChildPositionWithInt:(int32_t)itemCount {
  return ADXStaggeredGridLayoutManager_findLastReferenceChildPositionWithInt_(self, itemCount);
}

- (ADXRecyclerView_LayoutParams *)generateDefaultLayoutParams {
  if (mOrientation_ == ADXStaggeredGridLayoutManager_HORIZONTAL) {
    return create_ADXStaggeredGridLayoutManager_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_MATCH_PARENT);
  }
  else {
    return create_ADXStaggeredGridLayoutManager_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  }
}

- (bool)checkLayoutParamsWithADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)lp {
  return [lp isKindOfClass:[ADXStaggeredGridLayoutManager_LayoutParams class]];
}

- (int32_t)getOrientation {
  return mOrientation_;
}

- (ADView *)onFocusSearchFailedWithADView:(ADView *)focused
                                  withInt:(int32_t)direction
             withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if ([self getChildCount] == 0) {
    return nil;
  }
  ADView *directChild = [self findContainingItemViewWithADView:focused];
  if (directChild == nil) {
    return nil;
  }
  ADXStaggeredGridLayoutManager_resolveShouldLayoutReverse(self);
  int32_t layoutDir = ADXStaggeredGridLayoutManager_convertFocusDirectionToLayoutDirectionWithInt_(self, direction);
  if (layoutDir == ADXLayoutState_INVALID_LAYOUT) {
    return nil;
  }
  ADXStaggeredGridLayoutManager_LayoutParams *prevFocusLayoutParams = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([directChild getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
  bool prevFocusFullSpan = ((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(prevFocusLayoutParams))->mFullSpan_;
  ADXStaggeredGridLayoutManager_Span *prevFocusSpan = prevFocusLayoutParams->mSpan_;
  int32_t referenceChildPosition;
  if (layoutDir == ADXLayoutState_LAYOUT_END) {
    referenceChildPosition = [self getLastChildPosition];
  }
  else {
    referenceChildPosition = [self getFirstChildPosition];
  }
  ADXStaggeredGridLayoutManager_updateLayoutStateWithInt_withADXRecyclerView_State_(self, referenceChildPosition, state);
  ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, layoutDir);
  ((ADXLayoutState *) nil_chk(mLayoutState_))->mCurrentPosition_ = referenceChildPosition + mLayoutState_->mItemDirection_;
  mLayoutState_->mAvailable_ = JreFpToInt((ADXStaggeredGridLayoutManager_MAX_SCROLL_FACTOR * [((ADXOrientationHelper *) nil_chk(mPrimaryOrientation_)) getTotalSpace]));
  mLayoutState_->mStopInFocusable_ = true;
  mLayoutState_->mRecycle_ = false;
  ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, mLayoutState_, state);
  mLastLayoutFromEnd_ = mShouldReverseLayout_;
  if (!prevFocusFullSpan) {
    ADView *view = JreRetainedLocalValue([((ADXStaggeredGridLayoutManager_Span *) nil_chk(prevFocusSpan)) getFocusableViewAfterWithInt:referenceChildPosition withInt:layoutDir]);
    if (view != nil && !JreObjectEqualsEquals(view, directChild)) {
      return view;
    }
  }
  if (ADXStaggeredGridLayoutManager_preferLastSpanWithInt_(self, layoutDir)) {
    for (int32_t i = mSpanCount_ - 1; i >= 0; i--) {
      ADView *view = JreRetainedLocalValue([((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getFocusableViewAfterWithInt:referenceChildPosition withInt:layoutDir]);
      if (view != nil && !JreObjectEqualsEquals(view, directChild)) {
        return view;
      }
    }
  }
  else {
    for (int32_t i = 0; i < mSpanCount_; i++) {
      ADView *view = JreRetainedLocalValue([((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) getFocusableViewAfterWithInt:referenceChildPosition withInt:layoutDir]);
      if (view != nil && !JreObjectEqualsEquals(view, directChild)) {
        return view;
      }
    }
  }
  bool shouldSearchFromStart = !mReverseLayout_ == (layoutDir == ADXLayoutState_LAYOUT_START);
  ADView *unfocusableCandidate = nil;
  if (!prevFocusFullSpan) {
    unfocusableCandidate = [self findViewByPositionWithInt:shouldSearchFromStart ? [((ADXStaggeredGridLayoutManager_Span *) nil_chk(prevFocusSpan)) findFirstPartiallyVisibleItemPosition] : [((ADXStaggeredGridLayoutManager_Span *) nil_chk(prevFocusSpan)) findLastPartiallyVisibleItemPosition]];
    if (unfocusableCandidate != nil && !JreObjectEqualsEquals(unfocusableCandidate, directChild)) {
      return unfocusableCandidate;
    }
  }
  if (ADXStaggeredGridLayoutManager_preferLastSpanWithInt_(self, layoutDir)) {
    for (int32_t i = mSpanCount_ - 1; i >= 0; i--) {
      if (i == ((ADXStaggeredGridLayoutManager_Span *) nil_chk(prevFocusSpan))->mIndex_) {
        continue;
      }
      unfocusableCandidate = [self findViewByPositionWithInt:shouldSearchFromStart ? [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findFirstPartiallyVisibleItemPosition] : [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findLastPartiallyVisibleItemPosition]];
      if (unfocusableCandidate != nil && !JreObjectEqualsEquals(unfocusableCandidate, directChild)) {
        return unfocusableCandidate;
      }
    }
  }
  else {
    for (int32_t i = 0; i < mSpanCount_; i++) {
      unfocusableCandidate = [self findViewByPositionWithInt:shouldSearchFromStart ? [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findFirstPartiallyVisibleItemPosition] : [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(mSpans_), i))) findLastPartiallyVisibleItemPosition]];
      if (unfocusableCandidate != nil && !JreObjectEqualsEquals(unfocusableCandidate, directChild)) {
        return unfocusableCandidate;
      }
    }
  }
  return nil;
}

- (int32_t)convertFocusDirectionToLayoutDirectionWithInt:(int32_t)focusDirection {
  return ADXStaggeredGridLayoutManager_convertFocusDirectionToLayoutDirectionWithInt_(self, focusDirection);
}

- (void)dealloc {
  RELEASE_(mSpans_);
  RELEASE_(mPrimaryOrientation_);
  RELEASE_(mSecondaryOrientation_);
  RELEASE_(mLayoutState_);
  RELEASE_(mRemainingSpans_);
  RELEASE_(mLazySpanLookup_);
  RELEASE_(mPendingSavedState_);
  RELEASE_(mTmpRect_);
  RELEASE_(mAnchorInfo_);
  RELEASE_(mPrefetchDistances_);
  RELEASE_(mCheckForGapsRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 27, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 28, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 33, 31, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 34, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 35, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 36, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 38, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 39, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 41, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 42, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 43, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 46, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "LADParcelable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 51, 10, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 52, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 48, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 70, 71, -1, -1, -1, -1 },
    { NULL, "LADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem;", 0x2, 72, 2, -1, -1, -1, -1 },
    { NULL, "LADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem;", 0x2, 73, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 83, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 84, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 85, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 86, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 87, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 89, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 89, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 91, 2, -1, -1, -1, -1 },
    { NULL, "LADXStaggeredGridLayoutManager_Span;", 0x2, 92, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 95, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 95, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 97, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 101, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 102, 56, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 103, 95, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 104, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 105, 2, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_LayoutParams;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 106, 107, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 108, 109, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 110, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(isAutoMeasureEnabled);
  methods[2].selector = @selector(createOrientationHelpers);
  methods[3].selector = @selector(checkForGaps);
  methods[4].selector = @selector(onScrollStateChangedWithInt:);
  methods[5].selector = @selector(onDetachedFromWindowWithADXRecyclerView:withADXRecyclerView_Recycler:);
  methods[6].selector = @selector(hasGapsToFix);
  methods[7].selector = @selector(checkSpanForGapWithADXStaggeredGridLayoutManager_Span:);
  methods[8].selector = @selector(setSpanCountWithInt:);
  methods[9].selector = @selector(setOrientationWithInt:);
  methods[10].selector = @selector(setReverseLayoutWithBoolean:);
  methods[11].selector = @selector(getGapStrategy);
  methods[12].selector = @selector(setGapStrategyWithInt:);
  methods[13].selector = @selector(assertNotInLayoutOrScrollWithNSString:);
  methods[14].selector = @selector(getSpanCount);
  methods[15].selector = @selector(invalidateSpanAssignments);
  methods[16].selector = @selector(resolveShouldLayoutReverse);
  methods[17].selector = @selector(isLayoutRTL);
  methods[18].selector = @selector(getReverseLayout);
  methods[19].selector = @selector(setMeasuredDimensionWithADRect:withInt:withInt:);
  methods[20].selector = @selector(onLayoutChildrenWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[21].selector = @selector(onAdapterChangedWithADXRecyclerView_Adapter:withADXRecyclerView_Adapter:);
  methods[22].selector = @selector(onLayoutChildrenWithADXRecyclerView_Recycler:withADXRecyclerView_State:withBoolean:);
  methods[23].selector = @selector(onLayoutCompletedWithADXRecyclerView_State:);
  methods[24].selector = @selector(repositionToWrapContentIfNecessary);
  methods[25].selector = @selector(applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo:);
  methods[26].selector = @selector(updateAnchorInfoForLayoutWithADXRecyclerView_State:withADXStaggeredGridLayoutManager_AnchorInfo:);
  methods[27].selector = @selector(updateAnchorFromChildrenWithADXRecyclerView_State:withADXStaggeredGridLayoutManager_AnchorInfo:);
  methods[28].selector = @selector(updateAnchorFromPendingDataWithADXRecyclerView_State:withADXStaggeredGridLayoutManager_AnchorInfo:);
  methods[29].selector = @selector(updateMeasureSpecsWithInt:);
  methods[30].selector = @selector(supportsPredictiveItemAnimations);
  methods[31].selector = @selector(findFirstVisibleItemPositionsWithIntArray:);
  methods[32].selector = @selector(findFirstCompletelyVisibleItemPositionsWithIntArray:);
  methods[33].selector = @selector(findLastVisibleItemPositionsWithIntArray:);
  methods[34].selector = @selector(findLastCompletelyVisibleItemPositionsWithIntArray:);
  methods[35].selector = @selector(computeHorizontalScrollOffsetWithADXRecyclerView_State:);
  methods[36].selector = @selector(computeScrollOffsetWithADXRecyclerView_State:);
  methods[37].selector = @selector(computeVerticalScrollOffsetWithADXRecyclerView_State:);
  methods[38].selector = @selector(computeHorizontalScrollExtentWithADXRecyclerView_State:);
  methods[39].selector = @selector(computeScrollExtentWithADXRecyclerView_State:);
  methods[40].selector = @selector(computeVerticalScrollExtentWithADXRecyclerView_State:);
  methods[41].selector = @selector(computeHorizontalScrollRangeWithADXRecyclerView_State:);
  methods[42].selector = @selector(computeScrollRangeWithADXRecyclerView_State:);
  methods[43].selector = @selector(computeVerticalScrollRangeWithADXRecyclerView_State:);
  methods[44].selector = @selector(measureChildWithDecorationsAndMarginWithADView:withADXStaggeredGridLayoutManager_LayoutParams:withBoolean:);
  methods[45].selector = @selector(measureChildWithDecorationsAndMarginWithADView:withInt:withInt:withBoolean:);
  methods[46].selector = @selector(updateSpecWithExtraWithInt:withInt:withInt:);
  methods[47].selector = @selector(onRestoreInstanceStateWithADParcelable:);
  methods[48].selector = @selector(onSaveInstanceState);
  methods[49].selector = @selector(findFirstVisibleItemPositionInt);
  methods[50].selector = @selector(findFirstVisibleItemClosestToStartWithBoolean:);
  methods[51].selector = @selector(findFirstVisibleItemClosestToEndWithBoolean:);
  methods[52].selector = @selector(fixEndGapWithADXRecyclerView_Recycler:withADXRecyclerView_State:withBoolean:);
  methods[53].selector = @selector(fixStartGapWithADXRecyclerView_Recycler:withADXRecyclerView_State:withBoolean:);
  methods[54].selector = @selector(updateLayoutStateWithInt:withADXRecyclerView_State:);
  methods[55].selector = @selector(setLayoutStateDirectionWithInt:);
  methods[56].selector = @selector(offsetChildrenHorizontalWithInt:);
  methods[57].selector = @selector(offsetChildrenVerticalWithInt:);
  methods[58].selector = @selector(onItemsRemovedWithADXRecyclerView:withInt:withInt:);
  methods[59].selector = @selector(onItemsAddedWithADXRecyclerView:withInt:withInt:);
  methods[60].selector = @selector(onItemsChangedWithADXRecyclerView:);
  methods[61].selector = @selector(onItemsMovedWithADXRecyclerView:withInt:withInt:withInt:);
  methods[62].selector = @selector(onItemsUpdatedWithADXRecyclerView:withInt:withInt:withId:);
  methods[63].selector = @selector(handleUpdateWithInt:withInt:withInt:);
  methods[64].selector = @selector(fillWithADXRecyclerView_Recycler:withADXLayoutState:withADXRecyclerView_State:);
  methods[65].selector = @selector(createFullSpanItemFromEndWithInt:);
  methods[66].selector = @selector(createFullSpanItemFromStartWithInt:);
  methods[67].selector = @selector(attachViewToSpansWithADView:withADXStaggeredGridLayoutManager_LayoutParams:withADXLayoutState:);
  methods[68].selector = @selector(recycleWithADXRecyclerView_Recycler:withADXLayoutState:);
  methods[69].selector = @selector(appendViewToAllSpansWithADView:);
  methods[70].selector = @selector(prependViewToAllSpansWithADView:);
  methods[71].selector = @selector(updateAllRemainingSpansWithInt:withInt:);
  methods[72].selector = @selector(updateRemainingSpansWithADXStaggeredGridLayoutManager_Span:withInt:withInt:);
  methods[73].selector = @selector(getMaxStartWithInt:);
  methods[74].selector = @selector(getMinStartWithInt:);
  methods[75].selector = @selector(areAllEndsEqual);
  methods[76].selector = @selector(areAllStartsEqual);
  methods[77].selector = @selector(getMaxEndWithInt:);
  methods[78].selector = @selector(getMinEndWithInt:);
  methods[79].selector = @selector(recycleFromStartWithADXRecyclerView_Recycler:withInt:);
  methods[80].selector = @selector(recycleFromEndWithADXRecyclerView_Recycler:withInt:);
  methods[81].selector = @selector(preferLastSpanWithInt:);
  methods[82].selector = @selector(getNextSpanWithADXLayoutState:);
  methods[83].selector = @selector(canScrollVertically);
  methods[84].selector = @selector(canScrollHorizontally);
  methods[85].selector = @selector(scrollHorizontallyByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[86].selector = @selector(scrollVerticallyByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[87].selector = @selector(calculateScrollDirectionForPositionWithInt:);
  methods[88].selector = @selector(scrollToPositionWithInt:);
  methods[89].selector = @selector(scrollToPositionWithOffsetWithInt:withInt:);
  methods[90].selector = @selector(collectAdjacentPrefetchPositionsWithInt:withInt:withADXRecyclerView_State:withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:);
  methods[91].selector = @selector(prepareLayoutStateForDeltaWithInt:withADXRecyclerView_State:);
  methods[92].selector = @selector(scrollByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[93].selector = @selector(getLastChildPosition);
  methods[94].selector = @selector(getFirstChildPosition);
  methods[95].selector = @selector(findFirstReferenceChildPositionWithInt:);
  methods[96].selector = @selector(findLastReferenceChildPositionWithInt:);
  methods[97].selector = @selector(generateDefaultLayoutParams);
  methods[98].selector = @selector(checkLayoutParamsWithADXRecyclerView_LayoutParams:);
  methods[99].selector = @selector(getOrientation);
  methods[100].selector = @selector(onFocusSearchFailedWithADView:withInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[101].selector = @selector(convertFocusDirectionToLayoutDirectionWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 111, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXStaggeredGridLayoutManager_DEBUG, 0x18, -1, -1, -1, -1 },
    { "HORIZONTAL", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "GAP_HANDLING_NONE", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_GAP_HANDLING_NONE, 0x19, -1, -1, -1, -1 },
    { "GAP_HANDLING_LAZY", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_GAP_HANDLING_LAZY, 0x19, -1, -1, -1, -1 },
    { "GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS, 0x19, -1, -1, -1, -1 },
    { "INVALID_OFFSET", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_INVALID_OFFSET, 0x18, -1, -1, -1, -1 },
    { "MAX_SCROLL_FACTOR", "F", .constantValue.asFloat = ADXStaggeredGridLayoutManager_MAX_SCROLL_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "mSpanCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpans_", "[LADXStaggeredGridLayoutManager_Span;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPrimaryOrientation_", "LADXOrientationHelper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSecondaryOrientation_", "LADXOrientationHelper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOrientation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSizePerSpan_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLayoutState_", "LADXLayoutState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mReverseLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mShouldReverseLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRemainingSpans_", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPendingScrollPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPendingScrollPositionOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLazySpanLookup_", "LADXStaggeredGridLayoutManager_LazySpanLookup;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGapStrategy_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastLayoutFromEnd_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastLayoutRTL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPendingSavedState_", "LADXStaggeredGridLayoutManager_SavedState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFullSizeSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTmpRect_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mAnchorInfo_", "LADXStaggeredGridLayoutManager_AnchorInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLaidOutInvalidFullSpan_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSmoothScrollbarEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPrefetchDistances_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCheckForGapsRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "onScrollStateChanged", "I", "onDetachedFromWindow", "LADXRecyclerView;LADXRecyclerView_Recycler;", "checkSpanForGap", "LADXStaggeredGridLayoutManager_Span;", "setSpanCount", "setOrientation", "setReverseLayout", "Z", "setGapStrategy", "assertNotInLayoutOrScroll", "LNSString;", "setMeasuredDimension", "LADRect;II", "onLayoutChildren", "LADXRecyclerView_Recycler;LADXRecyclerView_State;", "onAdapterChanged", "LADXRecyclerView_Adapter;LADXRecyclerView_Adapter;", "LADXRecyclerView_Recycler;LADXRecyclerView_State;Z", "onLayoutCompleted", "LADXRecyclerView_State;", "applyPendingSavedState", "LADXStaggeredGridLayoutManager_AnchorInfo;", "updateAnchorInfoForLayout", "LADXRecyclerView_State;LADXStaggeredGridLayoutManager_AnchorInfo;", "updateAnchorFromChildren", "updateAnchorFromPendingData", "updateMeasureSpecs", "findFirstVisibleItemPositions", "[I", "findFirstCompletelyVisibleItemPositions", "findLastVisibleItemPositions", "findLastCompletelyVisibleItemPositions", "computeHorizontalScrollOffset", "computeScrollOffset", "computeVerticalScrollOffset", "computeHorizontalScrollExtent", "computeScrollExtent", "computeVerticalScrollExtent", "computeHorizontalScrollRange", "computeScrollRange", "computeVerticalScrollRange", "measureChildWithDecorationsAndMargin", "LADView;LADXStaggeredGridLayoutManager_LayoutParams;Z", "LADView;IIZ", "updateSpecWithExtra", "III", "onRestoreInstanceState", "LADParcelable;", "findFirstVisibleItemClosestToStart", "findFirstVisibleItemClosestToEnd", "fixEndGap", "fixStartGap", "updateLayoutState", "ILADXRecyclerView_State;", "setLayoutStateDirection", "offsetChildrenHorizontal", "offsetChildrenVertical", "onItemsRemoved", "LADXRecyclerView;II", "onItemsAdded", "onItemsChanged", "LADXRecyclerView;", "onItemsMoved", "LADXRecyclerView;III", "onItemsUpdated", "LADXRecyclerView;IILNSObject;", "handleUpdate", "fill", "LADXRecyclerView_Recycler;LADXLayoutState;LADXRecyclerView_State;", "createFullSpanItemFromEnd", "createFullSpanItemFromStart", "attachViewToSpans", "LADView;LADXStaggeredGridLayoutManager_LayoutParams;LADXLayoutState;", "recycle", "LADXRecyclerView_Recycler;LADXLayoutState;", "appendViewToAllSpans", "LADView;", "prependViewToAllSpans", "updateAllRemainingSpans", "updateRemainingSpans", "LADXStaggeredGridLayoutManager_Span;II", "getMaxStart", "getMinStart", "getMaxEnd", "getMinEnd", "recycleFromStart", "LADXRecyclerView_Recycler;I", "recycleFromEnd", "preferLastSpan", "getNextSpan", "LADXLayoutState;", "scrollHorizontallyBy", "ILADXRecyclerView_Recycler;LADXRecyclerView_State;", "scrollVerticallyBy", "calculateScrollDirectionForPosition", "scrollToPosition", "scrollToPositionWithOffset", "collectAdjacentPrefetchPositions", "IILADXRecyclerView_State;LADXRecyclerView_LayoutManager_LayoutPrefetchRegistry;", "prepareLayoutStateForDelta", "scrollBy", "findFirstReferenceChildPosition", "findLastReferenceChildPosition", "checkLayoutParams", "LADXRecyclerView_LayoutParams;", "onFocusSearchFailed", "LADView;ILADXRecyclerView_Recycler;LADXRecyclerView_State;", "convertFocusDirectionToLayoutDirection", &ADXStaggeredGridLayoutManager_TAG, "LADXStaggeredGridLayoutManager_LayoutParams;LADXStaggeredGridLayoutManager_Span;LADXStaggeredGridLayoutManager_LazySpanLookup;LADXStaggeredGridLayoutManager_SavedState;LADXStaggeredGridLayoutManager_AnchorInfo;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager = { "StaggeredGridLayoutManager", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x1, 102, 33, -1, 112, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager;
}

@end

void ADXStaggeredGridLayoutManager_initWithInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t spanCount, int32_t orientation) {
  ADXRecyclerView_LayoutManager_init(self);
  self->mSpanCount_ = -1;
  self->mReverseLayout_ = false;
  self->mShouldReverseLayout_ = false;
  self->mPendingScrollPosition_ = ADXRecyclerView_NO_POSITION;
  self->mPendingScrollPositionOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
  JreStrongAssignAndConsume(&self->mLazySpanLookup_, new_ADXStaggeredGridLayoutManager_LazySpanLookup_init());
  self->mGapStrategy_ = ADXStaggeredGridLayoutManager_GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS;
  JreStrongAssignAndConsume(&self->mTmpRect_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mAnchorInfo_, new_ADXStaggeredGridLayoutManager_AnchorInfo_initWithADXStaggeredGridLayoutManager_(self));
  self->mLaidOutInvalidFullSpan_ = false;
  self->mSmoothScrollbarEnabled_ = true;
  JreStrongAssignAndConsume(&self->mCheckForGapsRunnable_, new_ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(self));
  self->mOrientation_ = orientation;
  [self setSpanCountWithInt:spanCount];
  JreStrongAssignAndConsume(&self->mLayoutState_, new_ADXLayoutState_initPackagePrivate());
  ADXStaggeredGridLayoutManager_createOrientationHelpers(self);
}

ADXStaggeredGridLayoutManager *new_ADXStaggeredGridLayoutManager_initWithInt_withInt_(int32_t spanCount, int32_t orientation) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager, initWithInt_withInt_, spanCount, orientation)
}

ADXStaggeredGridLayoutManager *create_ADXStaggeredGridLayoutManager_initWithInt_withInt_(int32_t spanCount, int32_t orientation) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager, initWithInt_withInt_, spanCount, orientation)
}

void ADXStaggeredGridLayoutManager_createOrientationHelpers(ADXStaggeredGridLayoutManager *self) {
  JreStrongAssign(&self->mPrimaryOrientation_, ADXOrientationHelper_createOrientationHelperWithADXRecyclerView_LayoutManager_withInt_(self, self->mOrientation_));
  JreStrongAssign(&self->mSecondaryOrientation_, ADXOrientationHelper_createOrientationHelperWithADXRecyclerView_LayoutManager_withInt_(self, 1 - self->mOrientation_));
}

bool ADXStaggeredGridLayoutManager_checkSpanForGapWithADXStaggeredGridLayoutManager_Span_(ADXStaggeredGridLayoutManager *self, ADXStaggeredGridLayoutManager_Span *span) {
  if (self->mShouldReverseLayout_) {
    if ([((ADXStaggeredGridLayoutManager_Span *) nil_chk(span)) getEndLine] < [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding]) {
      ADView *endView = [((JavaUtilArrayList *) nil_chk(span->mViews_)) getWithInt:[span->mViews_ size] - 1];
      ADXStaggeredGridLayoutManager_LayoutParams *lp = [span getLayoutParamsWithADView:endView];
      return !((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_;
    }
  }
  else if ([((ADXStaggeredGridLayoutManager_Span *) nil_chk(span)) getStartLine] > [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding]) {
    ADView *startView = [((JavaUtilArrayList *) nil_chk(span->mViews_)) getWithInt:0];
    ADXStaggeredGridLayoutManager_LayoutParams *lp = [span getLayoutParamsWithADView:startView];
    return !((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_;
  }
  return false;
}

void ADXStaggeredGridLayoutManager_resolveShouldLayoutReverse(ADXStaggeredGridLayoutManager *self) {
  if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL || ![self isLayoutRTL]) {
    self->mShouldReverseLayout_ = self->mReverseLayout_;
  }
  else {
    self->mShouldReverseLayout_ = !self->mReverseLayout_;
  }
}

void ADXStaggeredGridLayoutManager_onLayoutChildrenWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, bool shouldCheckForGaps) {
  ADXStaggeredGridLayoutManager_AnchorInfo *anchorInfo = self->mAnchorInfo_;
  if (self->mPendingSavedState_ != nil || self->mPendingScrollPosition_ != ADXRecyclerView_NO_POSITION) {
    if ([((ADXRecyclerView_State *) nil_chk(state)) getItemCount] == 0) {
      [self removeAndRecycleAllViewsWithADXRecyclerView_Recycler:recycler];
      [((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo)) reset];
      return;
    }
  }
  bool recalculateAnchor = !((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mValid_ || self->mPendingScrollPosition_ != ADXRecyclerView_NO_POSITION || self->mPendingSavedState_ != nil;
  if (recalculateAnchor) {
    [anchorInfo reset];
    if (self->mPendingSavedState_ != nil) {
      ADXStaggeredGridLayoutManager_applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo_(self, anchorInfo);
    }
    else {
      ADXStaggeredGridLayoutManager_resolveShouldLayoutReverse(self);
      anchorInfo->mLayoutFromEnd_ = self->mShouldReverseLayout_;
    }
    [self updateAnchorInfoForLayoutWithADXRecyclerView_State:state withADXStaggeredGridLayoutManager_AnchorInfo:anchorInfo];
    anchorInfo->mValid_ = true;
  }
  if (self->mPendingSavedState_ == nil && self->mPendingScrollPosition_ == ADXRecyclerView_NO_POSITION) {
    if (anchorInfo->mLayoutFromEnd_ != self->mLastLayoutFromEnd_ || [self isLayoutRTL] != self->mLastLayoutRTL_) {
      [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) clear];
      anchorInfo->mInvalidateOffsets_ = true;
    }
  }
  if ([self getChildCount] > 0 && (self->mPendingSavedState_ == nil || self->mPendingSavedState_->mSpanOffsetsSize_ < 1)) {
    if (anchorInfo->mInvalidateOffsets_) {
      for (int32_t i = 0; i < self->mSpanCount_; i++) {
        [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) clear];
        if (anchorInfo->mOffset_ != ADXStaggeredGridLayoutManager_INVALID_OFFSET) {
          [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) setLineWithInt:anchorInfo->mOffset_];
        }
      }
    }
    else {
      if (recalculateAnchor || ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(self->mAnchorInfo_))->mSpanReferenceLines_ == nil) {
        for (int32_t i = 0; i < self->mSpanCount_; i++) {
          [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) cacheReferenceLineAndClearWithBoolean:self->mShouldReverseLayout_ withInt:anchorInfo->mOffset_];
        }
        [((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(self->mAnchorInfo_)) saveSpanReferenceLinesWithADXStaggeredGridLayoutManager_SpanArray:self->mSpans_];
      }
      else {
        for (int32_t i = 0; i < self->mSpanCount_; i++) {
          ADXStaggeredGridLayoutManager_Span *span = IOSObjectArray_Get(nil_chk(self->mSpans_), i);
          [((ADXStaggeredGridLayoutManager_Span *) nil_chk(span)) clear];
          [span setLineWithInt:IOSIntArray_Get(nil_chk(((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(self->mAnchorInfo_))->mSpanReferenceLines_), i)];
        }
      }
    }
  }
  [self detachAndScrapAttachedViewsWithADXRecyclerView_Recycler:recycler];
  ((ADXLayoutState *) nil_chk(self->mLayoutState_))->mRecycle_ = false;
  self->mLaidOutInvalidFullSpan_ = false;
  [self updateMeasureSpecsWithInt:[((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getTotalSpace]];
  ADXStaggeredGridLayoutManager_updateLayoutStateWithInt_withADXRecyclerView_State_(self, anchorInfo->mPosition_, state);
  if (anchorInfo->mLayoutFromEnd_) {
    ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, ADXLayoutState_LAYOUT_START);
    ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, self->mLayoutState_, state);
    ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, ADXLayoutState_LAYOUT_END);
    self->mLayoutState_->mCurrentPosition_ = anchorInfo->mPosition_ + self->mLayoutState_->mItemDirection_;
    ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, self->mLayoutState_, state);
  }
  else {
    ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, ADXLayoutState_LAYOUT_END);
    ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, self->mLayoutState_, state);
    ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(self, ADXLayoutState_LAYOUT_START);
    self->mLayoutState_->mCurrentPosition_ = anchorInfo->mPosition_ + self->mLayoutState_->mItemDirection_;
    ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(self, recycler, self->mLayoutState_, state);
  }
  ADXStaggeredGridLayoutManager_repositionToWrapContentIfNecessary(self);
  if ([self getChildCount] > 0) {
    if (self->mShouldReverseLayout_) {
      ADXStaggeredGridLayoutManager_fixEndGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, true);
      ADXStaggeredGridLayoutManager_fixStartGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, false);
    }
    else {
      ADXStaggeredGridLayoutManager_fixStartGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, true);
      ADXStaggeredGridLayoutManager_fixEndGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, false);
    }
  }
  bool hasGaps = false;
  if (shouldCheckForGaps && ![((ADXRecyclerView_State *) nil_chk(state)) isPreLayout]) {
    bool needToCheckForGaps = self->mGapStrategy_ != ADXStaggeredGridLayoutManager_GAP_HANDLING_NONE && [self getChildCount] > 0 && (self->mLaidOutInvalidFullSpan_ || [self hasGapsToFix] != nil);
    if (needToCheckForGaps) {
      [self removeCallbacksWithJavaLangRunnable:self->mCheckForGapsRunnable_];
      if ([self checkForGaps]) {
        hasGaps = true;
      }
    }
  }
  if ([((ADXRecyclerView_State *) nil_chk(state)) isPreLayout]) {
    [((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(self->mAnchorInfo_)) reset];
  }
  self->mLastLayoutFromEnd_ = anchorInfo->mLayoutFromEnd_;
  self->mLastLayoutRTL_ = [self isLayoutRTL];
  if (hasGaps) {
    [((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(self->mAnchorInfo_)) reset];
    ADXStaggeredGridLayoutManager_onLayoutChildrenWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(self, recycler, state, false);
  }
}

void ADXStaggeredGridLayoutManager_repositionToWrapContentIfNecessary(ADXStaggeredGridLayoutManager *self) {
  if ([((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getMode] == ADView_MeasureSpec_EXACTLY) {
    return;
  }
  float maxSize = 0;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    float size = [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getDecoratedMeasurementWithADView:child];
    if (size < maxSize) {
      continue;
    }
    ADXStaggeredGridLayoutManager_LayoutParams *layoutParams = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
    if ([((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(layoutParams)) isFullSpan]) {
      size = 1.0f * size / self->mSpanCount_;
    }
    maxSize = JavaLangMath_maxWithFloat_withFloat_(maxSize, size);
  }
  int32_t before = self->mSizePerSpan_;
  int32_t desired = JavaLangMath_roundWithFloat_(maxSize * self->mSpanCount_);
  if ([((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getMode] == ADView_MeasureSpec_AT_MOST) {
    desired = JavaLangMath_minWithInt_withInt_(desired, [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getTotalSpace]);
  }
  [self updateMeasureSpecsWithInt:desired];
  if (self->mSizePerSpan_ == before) {
    return;
  }
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXStaggeredGridLayoutManager_LayoutParams *lp = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
    if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
      continue;
    }
    if ([self isLayoutRTL] && self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      int32_t newOffset = -(self->mSpanCount_ - 1 - ((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_))->mIndex_) * self->mSizePerSpan_;
      int32_t prevOffset = -(self->mSpanCount_ - 1 - lp->mSpan_->mIndex_) * before;
      [child offsetLeftAndRightWithInt:newOffset - prevOffset];
    }
    else {
      int32_t newOffset = ((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_))->mIndex_ * self->mSizePerSpan_;
      int32_t prevOffset = lp->mSpan_->mIndex_ * before;
      if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
        [child offsetLeftAndRightWithInt:newOffset - prevOffset];
      }
      else {
        [child offsetTopAndBottomWithInt:newOffset - prevOffset];
      }
    }
  }
}

void ADXStaggeredGridLayoutManager_applyPendingSavedStateWithADXStaggeredGridLayoutManager_AnchorInfo_(ADXStaggeredGridLayoutManager *self, ADXStaggeredGridLayoutManager_AnchorInfo *anchorInfo) {
  if (((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(self->mPendingSavedState_))->mSpanOffsetsSize_ > 0) {
    if (self->mPendingSavedState_->mSpanOffsetsSize_ == self->mSpanCount_) {
      for (int32_t i = 0; i < self->mSpanCount_; i++) {
        [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) clear];
        int32_t line = IOSIntArray_Get(nil_chk(((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(self->mPendingSavedState_))->mSpanOffsets_), i);
        if (line != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
          if (self->mPendingSavedState_->mAnchorLayoutFromEnd_) {
            line += [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding];
          }
          else {
            line += [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding];
          }
        }
        [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) setLineWithInt:line];
      }
    }
    else {
      [self->mPendingSavedState_ invalidateSpanInfo];
      ((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(self->mPendingSavedState_))->mAnchorPosition_ = self->mPendingSavedState_->mVisibleAnchorPosition_;
    }
  }
  self->mLastLayoutRTL_ = ((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(self->mPendingSavedState_))->mLastLayoutRTL_;
  [self setReverseLayoutWithBoolean:self->mPendingSavedState_->mReverseLayout_];
  ADXStaggeredGridLayoutManager_resolveShouldLayoutReverse(self);
  if (((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(self->mPendingSavedState_))->mAnchorPosition_ != ADXRecyclerView_NO_POSITION) {
    self->mPendingScrollPosition_ = self->mPendingSavedState_->mAnchorPosition_;
    ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mLayoutFromEnd_ = self->mPendingSavedState_->mAnchorLayoutFromEnd_;
  }
  else {
    ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mLayoutFromEnd_ = self->mShouldReverseLayout_;
  }
  if (self->mPendingSavedState_->mSpanLookupSize_ > 1) {
    JreStrongAssign(&((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_))->mData_, self->mPendingSavedState_->mSpanLookup_);
    JreStrongAssign(&self->mLazySpanLookup_->mFullSpanItems_, self->mPendingSavedState_->mFullSpanItems_);
  }
}

bool ADXStaggeredGridLayoutManager_updateAnchorFromChildrenWithADXRecyclerView_State_withADXStaggeredGridLayoutManager_AnchorInfo_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state, ADXStaggeredGridLayoutManager_AnchorInfo *anchorInfo) {
  ((ADXStaggeredGridLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mPosition_ = self->mLastLayoutFromEnd_ ? ADXStaggeredGridLayoutManager_findLastReferenceChildPositionWithInt_(self, [((ADXRecyclerView_State *) nil_chk(state)) getItemCount]) : ADXStaggeredGridLayoutManager_findFirstReferenceChildPositionWithInt_(self, [((ADXRecyclerView_State *) nil_chk(state)) getItemCount]);
  anchorInfo->mOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
  return true;
}

int32_t ADXStaggeredGridLayoutManager_computeScrollOffsetWithADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state) {
  if ([self getChildCount] == 0) {
    return 0;
  }
  return ADXScrollbarHelper_computeScrollOffsetWithADXRecyclerView_State_withADXOrientationHelper_withADView_withADView_withADXRecyclerView_LayoutManager_withBoolean_withBoolean_(state, self->mPrimaryOrientation_, [self findFirstVisibleItemClosestToStartWithBoolean:!self->mSmoothScrollbarEnabled_], [self findFirstVisibleItemClosestToEndWithBoolean:!self->mSmoothScrollbarEnabled_], self, self->mSmoothScrollbarEnabled_, self->mShouldReverseLayout_);
}

int32_t ADXStaggeredGridLayoutManager_computeScrollExtentWithADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state) {
  if ([self getChildCount] == 0) {
    return 0;
  }
  return ADXScrollbarHelper_computeScrollExtentWithADXRecyclerView_State_withADXOrientationHelper_withADView_withADView_withADXRecyclerView_LayoutManager_withBoolean_(state, self->mPrimaryOrientation_, [self findFirstVisibleItemClosestToStartWithBoolean:!self->mSmoothScrollbarEnabled_], [self findFirstVisibleItemClosestToEndWithBoolean:!self->mSmoothScrollbarEnabled_], self, self->mSmoothScrollbarEnabled_);
}

int32_t ADXStaggeredGridLayoutManager_computeScrollRangeWithADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_State *state) {
  if ([self getChildCount] == 0) {
    return 0;
  }
  return ADXScrollbarHelper_computeScrollRangeWithADXRecyclerView_State_withADXOrientationHelper_withADView_withADView_withADXRecyclerView_LayoutManager_withBoolean_(state, self->mPrimaryOrientation_, [self findFirstVisibleItemClosestToStartWithBoolean:!self->mSmoothScrollbarEnabled_], [self findFirstVisibleItemClosestToEndWithBoolean:!self->mSmoothScrollbarEnabled_], self, self->mSmoothScrollbarEnabled_);
}

void ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withBoolean_(ADXStaggeredGridLayoutManager *self, ADView *child, ADXStaggeredGridLayoutManager_LayoutParams *lp, bool alreadyMeasured) {
  if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
    if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, child, self->mFullSizeSpec_, ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getHeight], [self getHeightMode], [self getPaddingTop] + [self getPaddingBottom], lp->height_, true), alreadyMeasured);
    }
    else {
      ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, child, ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getWidth], [self getWidthMode], [self getPaddingLeft] + [self getPaddingRight], lp->width_, true), self->mFullSizeSpec_, alreadyMeasured);
    }
  }
  else {
    if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, child, ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(self->mSizePerSpan_, [self getWidthMode], 0, lp->width_, false), ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getHeight], [self getHeightMode], [self getPaddingTop] + [self getPaddingBottom], lp->height_, true), alreadyMeasured);
    }
    else {
      ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, child, ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getWidth], [self getWidthMode], [self getPaddingLeft] + [self getPaddingRight], lp->width_, true), ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(self->mSizePerSpan_, [self getHeightMode], 0, lp->height_, false), alreadyMeasured);
    }
  }
}

void ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(ADXStaggeredGridLayoutManager *self, ADView *child, int32_t widthSpec, int32_t heightSpec, bool alreadyMeasured) {
  [self calculateItemDecorationsForChildWithADView:child withADRect:self->mTmpRect_];
  ADXStaggeredGridLayoutManager_LayoutParams *lp = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
  widthSpec = ADXStaggeredGridLayoutManager_updateSpecWithExtraWithInt_withInt_withInt_(self, widthSpec, ((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->leftMargin_ + ((ADRect *) nil_chk(self->mTmpRect_))->left_, lp->rightMargin_ + self->mTmpRect_->right_);
  heightSpec = ADXStaggeredGridLayoutManager_updateSpecWithExtraWithInt_withInt_withInt_(self, heightSpec, lp->topMargin_ + self->mTmpRect_->top_, lp->bottomMargin_ + self->mTmpRect_->bottom_);
  bool measure = alreadyMeasured ? [self shouldReMeasureChildWithADView:child withInt:widthSpec withInt:heightSpec withADXRecyclerView_LayoutParams:lp] : [self shouldMeasureChildWithADView:child withInt:widthSpec withInt:heightSpec withADXRecyclerView_LayoutParams:lp];
  if (measure) {
    [child measureWithInt:widthSpec withInt:heightSpec];
  }
}

int32_t ADXStaggeredGridLayoutManager_updateSpecWithExtraWithInt_withInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t spec, int32_t startInset, int32_t endInset) {
  if (startInset == 0 && endInset == 0) {
    return spec;
  }
  int32_t mode = ADView_MeasureSpec_getModeWithInt_(spec);
  if (mode == ADView_MeasureSpec_AT_MOST || mode == ADView_MeasureSpec_EXACTLY) {
    return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(0, ADView_MeasureSpec_getSizeWithInt_(spec) - startInset - endInset), mode);
  }
  return spec;
}

void ADXStaggeredGridLayoutManager_fixEndGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, bool canOffsetChildren) {
  int32_t maxEndLine = ADXStaggeredGridLayoutManager_getMaxEndWithInt_(self, JavaLangInteger_MIN_VALUE);
  if (maxEndLine == JavaLangInteger_MIN_VALUE) {
    return;
  }
  int32_t gap = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding] - maxEndLine;
  int32_t fixOffset;
  if (gap > 0) {
    fixOffset = -[self scrollByWithInt:-gap withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
  }
  else {
    return;
  }
  gap -= fixOffset;
  if (canOffsetChildren && gap > 0) {
    [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) offsetChildrenWithInt:gap];
  }
}

void ADXStaggeredGridLayoutManager_fixStartGapWithADXRecyclerView_Recycler_withADXRecyclerView_State_withBoolean_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, bool canOffsetChildren) {
  int32_t minStartLine = ADXStaggeredGridLayoutManager_getMinStartWithInt_(self, JavaLangInteger_MAX_VALUE);
  if (minStartLine == JavaLangInteger_MAX_VALUE) {
    return;
  }
  int32_t gap = minStartLine - [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding];
  int32_t fixOffset;
  if (gap > 0) {
    fixOffset = [self scrollByWithInt:gap withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
  }
  else {
    return;
  }
  gap -= fixOffset;
  if (canOffsetChildren && gap > 0) {
    [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) offsetChildrenWithInt:-gap];
  }
}

void ADXStaggeredGridLayoutManager_updateLayoutStateWithInt_withADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, int32_t anchorPosition, ADXRecyclerView_State *state) {
  ((ADXLayoutState *) nil_chk(self->mLayoutState_))->mAvailable_ = 0;
  self->mLayoutState_->mCurrentPosition_ = anchorPosition;
  int32_t startExtra = 0;
  int32_t endExtra = 0;
  bool clipToPadding = [self getClipToPadding];
  if (clipToPadding) {
    self->mLayoutState_->mStartLine_ = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding] - startExtra;
    self->mLayoutState_->mEndLine_ = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding] + endExtra;
  }
  else {
    self->mLayoutState_->mEndLine_ = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEnd] + endExtra;
    self->mLayoutState_->mStartLine_ = -startExtra;
  }
  self->mLayoutState_->mStopInFocusable_ = false;
  self->mLayoutState_->mRecycle_ = true;
  self->mLayoutState_->mInfinite_ = ([((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getMode] == ADView_MeasureSpec_UNSPECIFIED && [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEnd] == 0);
}

void ADXStaggeredGridLayoutManager_setLayoutStateDirectionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t direction) {
  ((ADXLayoutState *) nil_chk(self->mLayoutState_))->mLayoutDirection_ = direction;
  self->mLayoutState_->mItemDirection_ = (self->mShouldReverseLayout_ == (direction == ADXLayoutState_LAYOUT_START)) ? ADXLayoutState_ITEM_DIRECTION_TAIL : ADXLayoutState_ITEM_DIRECTION_HEAD;
}

void ADXStaggeredGridLayoutManager_handleUpdateWithInt_withInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t positionStart, int32_t itemCountOrToPosition, int32_t cmd) {
  int32_t minPosition = self->mShouldReverseLayout_ ? [self getLastChildPosition] : [self getFirstChildPosition];
  int32_t affectedRangeEnd;
  int32_t affectedRangeStart;
  if (cmd == ADXAdapterHelper_UpdateOp_MOVE) {
    if (positionStart < itemCountOrToPosition) {
      affectedRangeEnd = itemCountOrToPosition + 1;
      affectedRangeStart = positionStart;
    }
    else {
      affectedRangeEnd = positionStart + 1;
      affectedRangeStart = itemCountOrToPosition;
    }
  }
  else {
    affectedRangeStart = positionStart;
    affectedRangeEnd = positionStart + itemCountOrToPosition;
  }
  [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) invalidateAfterWithInt:affectedRangeStart];
  switch (cmd) {
    case ADXAdapterHelper_UpdateOp_ADD:
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) offsetForAdditionWithInt:positionStart withInt:itemCountOrToPosition];
    break;
    case ADXAdapterHelper_UpdateOp_REMOVE:
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) offsetForRemovalWithInt:positionStart withInt:itemCountOrToPosition];
    break;
    case ADXAdapterHelper_UpdateOp_MOVE:
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) offsetForRemovalWithInt:positionStart withInt:1];
    [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) offsetForAdditionWithInt:itemCountOrToPosition withInt:1];
    break;
  }
  if (affectedRangeEnd <= minPosition) {
    return;
  }
  int32_t maxPosition = self->mShouldReverseLayout_ ? [self getFirstChildPosition] : [self getLastChildPosition];
  if (affectedRangeStart <= maxPosition) {
    [self requestLayout];
  }
}

int32_t ADXStaggeredGridLayoutManager_fillWithADXRecyclerView_Recycler_withADXLayoutState_withADXRecyclerView_State_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXLayoutState *layoutState, ADXRecyclerView_State *state) {
  [((JavaUtilBitSet *) nil_chk(self->mRemainingSpans_)) setWithInt:0 withInt:self->mSpanCount_ withBoolean:true];
  int32_t targetLine;
  if (((ADXLayoutState *) nil_chk(self->mLayoutState_))->mInfinite_) {
    if (((ADXLayoutState *) nil_chk(layoutState))->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
      targetLine = JavaLangInteger_MAX_VALUE;
    }
    else {
      targetLine = JavaLangInteger_MIN_VALUE;
    }
  }
  else {
    if (((ADXLayoutState *) nil_chk(layoutState))->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
      targetLine = layoutState->mEndLine_ + layoutState->mAvailable_;
    }
    else {
      targetLine = layoutState->mStartLine_ - layoutState->mAvailable_;
    }
  }
  ADXStaggeredGridLayoutManager_updateAllRemainingSpansWithInt_withInt_(self, layoutState->mLayoutDirection_, targetLine);
  int32_t defaultNewViewLine = self->mShouldReverseLayout_ ? [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding] : [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding];
  bool added = false;
  while ([layoutState hasMoreWithADXRecyclerView_State:state] && (self->mLayoutState_->mInfinite_ || ![((JavaUtilBitSet *) nil_chk(self->mRemainingSpans_)) isEmpty])) {
    ADView *view = JreRetainedLocalValue([layoutState nextWithADXRecyclerView_Recycler:recycler]);
    ADXStaggeredGridLayoutManager_LayoutParams *lp = ((ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]));
    int32_t position = [((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp)) getViewLayoutPosition];
    int32_t spanIndex = [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) getSpanWithInt:position];
    ADXStaggeredGridLayoutManager_Span *currentSpan;
    bool assignSpan = spanIndex == ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
    if (assignSpan) {
      currentSpan = lp->mFullSpan_ ? IOSObjectArray_Get(nil_chk(self->mSpans_), 0) : ADXStaggeredGridLayoutManager_getNextSpanWithADXLayoutState_(self, layoutState);
      [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) setSpanWithInt:position withADXStaggeredGridLayoutManager_Span:currentSpan];
    }
    else {
      currentSpan = IOSObjectArray_Get(nil_chk(self->mSpans_), spanIndex);
    }
    JreStrongAssign(&lp->mSpan_, currentSpan);
    if (layoutState->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
      [self addViewWithADView:view];
    }
    else {
      [self addViewWithADView:view withInt:0];
    }
    ADXStaggeredGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withBoolean_(self, view, lp, false);
    int32_t start;
    int32_t end;
    if (layoutState->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
      start = lp->mFullSpan_ ? ADXStaggeredGridLayoutManager_getMaxEndWithInt_(self, defaultNewViewLine) : [((ADXStaggeredGridLayoutManager_Span *) nil_chk(currentSpan)) getEndLineWithInt:defaultNewViewLine];
      end = start + [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getDecoratedMeasurementWithADView:view];
      if (assignSpan && lp->mFullSpan_) {
        ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fullSpanItem;
        fullSpanItem = ADXStaggeredGridLayoutManager_createFullSpanItemFromEndWithInt_(self, start);
        ((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fullSpanItem))->mGapDir_ = ADXLayoutState_LAYOUT_START;
        fullSpanItem->mPosition_ = position;
        [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) addFullSpanItemWithADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem:fullSpanItem];
      }
    }
    else {
      end = lp->mFullSpan_ ? ADXStaggeredGridLayoutManager_getMinStartWithInt_(self, defaultNewViewLine) : [((ADXStaggeredGridLayoutManager_Span *) nil_chk(currentSpan)) getStartLineWithInt:defaultNewViewLine];
      start = end - [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getDecoratedMeasurementWithADView:view];
      if (assignSpan && lp->mFullSpan_) {
        ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fullSpanItem;
        fullSpanItem = ADXStaggeredGridLayoutManager_createFullSpanItemFromStartWithInt_(self, end);
        ((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fullSpanItem))->mGapDir_ = ADXLayoutState_LAYOUT_END;
        fullSpanItem->mPosition_ = position;
        [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) addFullSpanItemWithADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem:fullSpanItem];
      }
    }
    if (lp->mFullSpan_ && layoutState->mItemDirection_ == ADXLayoutState_ITEM_DIRECTION_HEAD) {
      if (assignSpan) {
        self->mLaidOutInvalidFullSpan_ = true;
      }
      else {
        bool hasInvalidGap;
        if (layoutState->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
          hasInvalidGap = ![self areAllEndsEqual];
        }
        else {
          hasInvalidGap = ![self areAllStartsEqual];
        }
        if (hasInvalidGap) {
          ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fullSpanItem = [((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(self->mLazySpanLookup_)) getFullSpanItemWithInt:position];
          if (fullSpanItem != nil) {
            fullSpanItem->mHasUnwantedGapAfter_ = true;
          }
          self->mLaidOutInvalidFullSpan_ = true;
        }
      }
    }
    ADXStaggeredGridLayoutManager_attachViewToSpansWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withADXLayoutState_(self, view, lp, layoutState);
    int32_t otherStart;
    int32_t otherEnd;
    if ([self isLayoutRTL] && self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      otherEnd = lp->mFullSpan_ ? [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getEndAfterPadding] : [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getEndAfterPadding] - (self->mSpanCount_ - 1 - ((ADXStaggeredGridLayoutManager_Span *) nil_chk(currentSpan))->mIndex_) * self->mSizePerSpan_;
      otherStart = otherEnd - [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getDecoratedMeasurementWithADView:view];
    }
    else {
      otherStart = lp->mFullSpan_ ? [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getStartAfterPadding] : ((ADXStaggeredGridLayoutManager_Span *) nil_chk(currentSpan))->mIndex_ * self->mSizePerSpan_ + [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getStartAfterPadding];
      otherEnd = otherStart + [((ADXOrientationHelper *) nil_chk(self->mSecondaryOrientation_)) getDecoratedMeasurementWithADView:view];
    }
    if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      [self layoutDecoratedWithMarginsWithADView:view withInt:otherStart withInt:start withInt:otherEnd withInt:end];
    }
    else {
      [self layoutDecoratedWithMarginsWithADView:view withInt:start withInt:otherStart withInt:end withInt:otherEnd];
    }
    if (lp->mFullSpan_) {
      ADXStaggeredGridLayoutManager_updateAllRemainingSpansWithInt_withInt_(self, self->mLayoutState_->mLayoutDirection_, targetLine);
    }
    else {
      ADXStaggeredGridLayoutManager_updateRemainingSpansWithADXStaggeredGridLayoutManager_Span_withInt_withInt_(self, currentSpan, self->mLayoutState_->mLayoutDirection_, targetLine);
    }
    ADXStaggeredGridLayoutManager_recycleWithADXRecyclerView_Recycler_withADXLayoutState_(self, recycler, self->mLayoutState_);
    added = true;
  }
  if (!added) {
    ADXStaggeredGridLayoutManager_recycleWithADXRecyclerView_Recycler_withADXLayoutState_(self, recycler, self->mLayoutState_);
  }
  int32_t diff;
  if (self->mLayoutState_->mLayoutDirection_ == ADXLayoutState_LAYOUT_START) {
    int32_t minStart = ADXStaggeredGridLayoutManager_getMinStartWithInt_(self, [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding]);
    diff = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding] - minStart;
  }
  else {
    int32_t maxEnd = ADXStaggeredGridLayoutManager_getMaxEndWithInt_(self, [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding]);
    diff = maxEnd - [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding];
  }
  return diff > 0 ? JavaLangMath_minWithInt_withInt_(layoutState->mAvailable_, diff) : 0;
}

ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *ADXStaggeredGridLayoutManager_createFullSpanItemFromEndWithInt_(ADXStaggeredGridLayoutManager *self, int32_t newItemTop) {
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = create_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_init();
  JreStrongAssignAndConsume(&fsi->mGapPerSpan_, [IOSIntArray newArrayWithLength:self->mSpanCount_]);
  for (int32_t i = 0; i < self->mSpanCount_; i++) {
    *IOSIntArray_GetRef(nil_chk(fsi->mGapPerSpan_), i) = newItemTop - [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) getEndLineWithInt:newItemTop];
  }
  return fsi;
}

ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *ADXStaggeredGridLayoutManager_createFullSpanItemFromStartWithInt_(ADXStaggeredGridLayoutManager *self, int32_t newItemBottom) {
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = create_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_init();
  JreStrongAssignAndConsume(&fsi->mGapPerSpan_, [IOSIntArray newArrayWithLength:self->mSpanCount_]);
  for (int32_t i = 0; i < self->mSpanCount_; i++) {
    *IOSIntArray_GetRef(nil_chk(fsi->mGapPerSpan_), i) = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) getStartLineWithInt:newItemBottom] - newItemBottom;
  }
  return fsi;
}

void ADXStaggeredGridLayoutManager_attachViewToSpansWithADView_withADXStaggeredGridLayoutManager_LayoutParams_withADXLayoutState_(ADXStaggeredGridLayoutManager *self, ADView *view, ADXStaggeredGridLayoutManager_LayoutParams *lp, ADXLayoutState *layoutState) {
  if (((ADXLayoutState *) nil_chk(layoutState))->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
    if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
      ADXStaggeredGridLayoutManager_appendViewToAllSpansWithADView_(self, view);
    }
    else {
      [((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_)) appendToSpanWithADView:view];
    }
  }
  else {
    if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
      ADXStaggeredGridLayoutManager_prependViewToAllSpansWithADView_(self, view);
    }
    else {
      [((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_)) prependToSpanWithADView:view];
    }
  }
}

void ADXStaggeredGridLayoutManager_recycleWithADXRecyclerView_Recycler_withADXLayoutState_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXLayoutState *layoutState) {
  if (!((ADXLayoutState *) nil_chk(layoutState))->mRecycle_ || layoutState->mInfinite_) {
    return;
  }
  if (layoutState->mAvailable_ == 0) {
    if (layoutState->mLayoutDirection_ == ADXLayoutState_LAYOUT_START) {
      ADXStaggeredGridLayoutManager_recycleFromEndWithADXRecyclerView_Recycler_withInt_(self, recycler, layoutState->mEndLine_);
    }
    else {
      ADXStaggeredGridLayoutManager_recycleFromStartWithADXRecyclerView_Recycler_withInt_(self, recycler, layoutState->mStartLine_);
    }
  }
  else {
    if (layoutState->mLayoutDirection_ == ADXLayoutState_LAYOUT_START) {
      int32_t scrolled = layoutState->mStartLine_ - ADXStaggeredGridLayoutManager_getMaxStartWithInt_(self, layoutState->mStartLine_);
      int32_t line;
      if (scrolled < 0) {
        line = layoutState->mEndLine_;
      }
      else {
        line = layoutState->mEndLine_ - JavaLangMath_minWithInt_withInt_(scrolled, layoutState->mAvailable_);
      }
      ADXStaggeredGridLayoutManager_recycleFromEndWithADXRecyclerView_Recycler_withInt_(self, recycler, line);
    }
    else {
      int32_t scrolled = ADXStaggeredGridLayoutManager_getMinEndWithInt_(self, layoutState->mEndLine_) - layoutState->mEndLine_;
      int32_t line;
      if (scrolled < 0) {
        line = layoutState->mStartLine_;
      }
      else {
        line = layoutState->mStartLine_ + JavaLangMath_minWithInt_withInt_(scrolled, layoutState->mAvailable_);
      }
      ADXStaggeredGridLayoutManager_recycleFromStartWithADXRecyclerView_Recycler_withInt_(self, recycler, line);
    }
  }
}

void ADXStaggeredGridLayoutManager_appendViewToAllSpansWithADView_(ADXStaggeredGridLayoutManager *self, ADView *view) {
  for (int32_t i = self->mSpanCount_ - 1; i >= 0; i--) {
    [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) appendToSpanWithADView:view];
  }
}

void ADXStaggeredGridLayoutManager_prependViewToAllSpansWithADView_(ADXStaggeredGridLayoutManager *self, ADView *view) {
  for (int32_t i = self->mSpanCount_ - 1; i >= 0; i--) {
    [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) prependToSpanWithADView:view];
  }
}

void ADXStaggeredGridLayoutManager_updateAllRemainingSpansWithInt_withInt_(ADXStaggeredGridLayoutManager *self, int32_t layoutDir, int32_t targetLine) {
  for (int32_t i = 0; i < self->mSpanCount_; i++) {
    if ([((JavaUtilArrayList *) nil_chk(((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i)))->mViews_)) isEmpty]) {
      continue;
    }
    ADXStaggeredGridLayoutManager_updateRemainingSpansWithADXStaggeredGridLayoutManager_Span_withInt_withInt_(self, IOSObjectArray_Get(nil_chk(self->mSpans_), i), layoutDir, targetLine);
  }
}

void ADXStaggeredGridLayoutManager_updateRemainingSpansWithADXStaggeredGridLayoutManager_Span_withInt_withInt_(ADXStaggeredGridLayoutManager *self, ADXStaggeredGridLayoutManager_Span *span, int32_t layoutDir, int32_t targetLine) {
  int32_t deletedSize = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(span)) getDeletedSize];
  if (layoutDir == ADXLayoutState_LAYOUT_START) {
    int32_t line = [span getStartLine];
    if (line + deletedSize <= targetLine) {
      [((JavaUtilBitSet *) nil_chk(self->mRemainingSpans_)) setWithInt:span->mIndex_ withBoolean:false];
    }
  }
  else {
    int32_t line = [span getEndLine];
    if (line - deletedSize >= targetLine) {
      [((JavaUtilBitSet *) nil_chk(self->mRemainingSpans_)) setWithInt:span->mIndex_ withBoolean:false];
    }
  }
}

int32_t ADXStaggeredGridLayoutManager_getMaxStartWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def) {
  int32_t maxStart = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), 0))) getStartLineWithInt:def];
  for (int32_t i = 1; i < self->mSpanCount_; i++) {
    int32_t spanStart = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) getStartLineWithInt:def];
    if (spanStart > maxStart) {
      maxStart = spanStart;
    }
  }
  return maxStart;
}

int32_t ADXStaggeredGridLayoutManager_getMinStartWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def) {
  int32_t minStart = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), 0))) getStartLineWithInt:def];
  for (int32_t i = 1; i < self->mSpanCount_; i++) {
    int32_t spanStart = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) getStartLineWithInt:def];
    if (spanStart < minStart) {
      minStart = spanStart;
    }
  }
  return minStart;
}

int32_t ADXStaggeredGridLayoutManager_getMaxEndWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def) {
  int32_t maxEnd = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), 0))) getEndLineWithInt:def];
  for (int32_t i = 1; i < self->mSpanCount_; i++) {
    int32_t spanEnd = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) getEndLineWithInt:def];
    if (spanEnd > maxEnd) {
      maxEnd = spanEnd;
    }
  }
  return maxEnd;
}

int32_t ADXStaggeredGridLayoutManager_getMinEndWithInt_(ADXStaggeredGridLayoutManager *self, int32_t def) {
  int32_t minEnd = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), 0))) getEndLineWithInt:def];
  for (int32_t i = 1; i < self->mSpanCount_; i++) {
    int32_t spanEnd = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), i))) getEndLineWithInt:def];
    if (spanEnd < minEnd) {
      minEnd = spanEnd;
    }
  }
  return minEnd;
}

void ADXStaggeredGridLayoutManager_recycleFromStartWithADXRecyclerView_Recycler_withInt_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, int32_t line) {
  while ([self getChildCount] > 0) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:0]);
    if ([((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getDecoratedEndWithADView:child] <= line && [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getTransformedEndWithDecorationWithADView:child] <= line) {
      ADXStaggeredGridLayoutManager_LayoutParams *lp = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
      if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
        for (int32_t j = 0; j < self->mSpanCount_; j++) {
          if ([((JavaUtilArrayList *) nil_chk(((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), j)))->mViews_)) size] == 1) {
            return;
          }
        }
        for (int32_t j = 0; j < self->mSpanCount_; j++) {
          [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), j))) popStart];
        }
      }
      else {
        if ([((JavaUtilArrayList *) nil_chk(((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_))->mViews_)) size] == 1) {
          return;
        }
        [((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_)) popStart];
      }
      [self removeAndRecycleViewWithADView:child withADXRecyclerView_Recycler:recycler];
    }
    else {
      return;
    }
  }
}

void ADXStaggeredGridLayoutManager_recycleFromEndWithADXRecyclerView_Recycler_withInt_(ADXStaggeredGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, int32_t line) {
  int32_t childCount = [self getChildCount];
  int32_t i;
  for (i = childCount - 1; i >= 0; i--) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getDecoratedStartWithADView:child] >= line && [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getTransformedStartWithDecorationWithADView:child] >= line) {
      ADXStaggeredGridLayoutManager_LayoutParams *lp = (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
      if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
        for (int32_t j = 0; j < self->mSpanCount_; j++) {
          if ([((JavaUtilArrayList *) nil_chk(((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), j)))->mViews_)) size] == 1) {
            return;
          }
        }
        for (int32_t j = 0; j < self->mSpanCount_; j++) {
          [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(nil_chk(self->mSpans_), j))) popEnd];
        }
      }
      else {
        if ([((JavaUtilArrayList *) nil_chk(((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_))->mViews_)) size] == 1) {
          return;
        }
        [((ADXStaggeredGridLayoutManager_Span *) nil_chk(lp->mSpan_)) popEnd];
      }
      [self removeAndRecycleViewWithADView:child withADXRecyclerView_Recycler:recycler];
    }
    else {
      return;
    }
  }
}

bool ADXStaggeredGridLayoutManager_preferLastSpanWithInt_(ADXStaggeredGridLayoutManager *self, int32_t layoutDir) {
  if (self->mOrientation_ == ADXStaggeredGridLayoutManager_HORIZONTAL) {
    return (layoutDir == ADXLayoutState_LAYOUT_START) != self->mShouldReverseLayout_;
  }
  return ((layoutDir == ADXLayoutState_LAYOUT_START) == self->mShouldReverseLayout_) == [self isLayoutRTL];
}

ADXStaggeredGridLayoutManager_Span *ADXStaggeredGridLayoutManager_getNextSpanWithADXLayoutState_(ADXStaggeredGridLayoutManager *self, ADXLayoutState *layoutState) {
  bool preferLastSpan = ADXStaggeredGridLayoutManager_preferLastSpanWithInt_(self, ((ADXLayoutState *) nil_chk(layoutState))->mLayoutDirection_);
  int32_t startIndex;
  int32_t endIndex;
  int32_t diff;
  if (preferLastSpan) {
    startIndex = self->mSpanCount_ - 1;
    endIndex = -1;
    diff = -1;
  }
  else {
    startIndex = 0;
    endIndex = self->mSpanCount_;
    diff = 1;
  }
  if (layoutState->mLayoutDirection_ == ADXLayoutState_LAYOUT_END) {
    ADXStaggeredGridLayoutManager_Span *min = nil;
    int32_t minLine = JavaLangInteger_MAX_VALUE;
    int32_t defaultLine = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getStartAfterPadding];
    for (int32_t i = startIndex; i != endIndex; i += diff) {
      ADXStaggeredGridLayoutManager_Span *other = IOSObjectArray_Get(nil_chk(self->mSpans_), i);
      int32_t otherLine = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(other)) getEndLineWithInt:defaultLine];
      if (otherLine < minLine) {
        min = other;
        minLine = otherLine;
      }
    }
    return min;
  }
  else {
    ADXStaggeredGridLayoutManager_Span *max = nil;
    int32_t maxLine = JavaLangInteger_MIN_VALUE;
    int32_t defaultLine = [((ADXOrientationHelper *) nil_chk(self->mPrimaryOrientation_)) getEndAfterPadding];
    for (int32_t i = startIndex; i != endIndex; i += diff) {
      ADXStaggeredGridLayoutManager_Span *other = IOSObjectArray_Get(nil_chk(self->mSpans_), i);
      int32_t otherLine = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(other)) getStartLineWithInt:defaultLine];
      if (otherLine > maxLine) {
        max = other;
        maxLine = otherLine;
      }
    }
    return max;
  }
}

int32_t ADXStaggeredGridLayoutManager_calculateScrollDirectionForPositionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t position) {
  if ([self getChildCount] == 0) {
    return self->mShouldReverseLayout_ ? ADXLayoutState_LAYOUT_END : ADXLayoutState_LAYOUT_START;
  }
  int32_t firstChildPos = [self getFirstChildPosition];
  return position < firstChildPos != self->mShouldReverseLayout_ ? ADXLayoutState_LAYOUT_START : ADXLayoutState_LAYOUT_END;
}

int32_t ADXStaggeredGridLayoutManager_findFirstReferenceChildPositionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t itemCount) {
  int32_t limit = [self getChildCount];
  for (int32_t i = 0; i < limit; i++) {
    ADView *view = [self getChildAtWithInt:i];
    int32_t position = [self getPositionWithADView:view];
    if (position >= 0 && position < itemCount) {
      return position;
    }
  }
  return 0;
}

int32_t ADXStaggeredGridLayoutManager_findLastReferenceChildPositionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t itemCount) {
  for (int32_t i = [self getChildCount] - 1; i >= 0; i--) {
    ADView *view = [self getChildAtWithInt:i];
    int32_t position = [self getPositionWithADView:view];
    if (position >= 0 && position < itemCount) {
      return position;
    }
  }
  return 0;
}

int32_t ADXStaggeredGridLayoutManager_convertFocusDirectionToLayoutDirectionWithInt_(ADXStaggeredGridLayoutManager *self, int32_t focusDirection) {
  switch (focusDirection) {
    case ADView_FOCUS_BACKWARD:
    if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      return ADXLayoutState_LAYOUT_START;
    }
    else if ([self isLayoutRTL]) {
      return ADXLayoutState_LAYOUT_END;
    }
    else {
      return ADXLayoutState_LAYOUT_START;
    }
    case ADView_FOCUS_FORWARD:
    if (self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL) {
      return ADXLayoutState_LAYOUT_END;
    }
    else if ([self isLayoutRTL]) {
      return ADXLayoutState_LAYOUT_START;
    }
    else {
      return ADXLayoutState_LAYOUT_END;
    }
    case ADView_FOCUS_UP:
    return self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL ? ADXLayoutState_LAYOUT_START : ADXLayoutState_INVALID_LAYOUT;
    case ADView_FOCUS_DOWN:
    return self->mOrientation_ == ADXStaggeredGridLayoutManager_VERTICAL ? ADXLayoutState_LAYOUT_END : ADXLayoutState_INVALID_LAYOUT;
    case ADView_FOCUS_LEFT:
    return self->mOrientation_ == ADXStaggeredGridLayoutManager_HORIZONTAL ? ADXLayoutState_LAYOUT_START : ADXLayoutState_INVALID_LAYOUT;
    case ADView_FOCUS_RIGHT:
    return self->mOrientation_ == ADXStaggeredGridLayoutManager_HORIZONTAL ? ADXLayoutState_LAYOUT_END : ADXLayoutState_INVALID_LAYOUT;
    default:
    return ADXLayoutState_INVALID_LAYOUT;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager)

J2OBJC_NAME_MAPPING(ADXStaggeredGridLayoutManager, "androidx.recyclerview.widget", "ADX")

@implementation ADXStaggeredGridLayoutManager_1

- (instancetype)initWithADXStaggeredGridLayoutManager:(ADXStaggeredGridLayoutManager *)outer$ {
  ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ checkForGaps];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXStaggeredGridLayoutManager:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXStaggeredGridLayoutManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXStaggeredGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_1 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_1;
}

@end

void ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager_1 *self, ADXStaggeredGridLayoutManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXStaggeredGridLayoutManager_1 *new_ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager *outer$) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_1, initWithADXStaggeredGridLayoutManager_, outer$)
}

ADXStaggeredGridLayoutManager_1 *create_ADXStaggeredGridLayoutManager_1_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager *outer$) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_1, initWithADXStaggeredGridLayoutManager_, outer$)
}

@implementation ADXStaggeredGridLayoutManager_LayoutParams

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height {
  ADXStaggeredGridLayoutManager_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_MarginLayoutParams:(ADViewGroup_MarginLayoutParams *)source {
  ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)source {
  ADXStaggeredGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(self, source);
  return self;
}

- (void)setFullSpanWithBoolean:(bool)fullSpan {
  mFullSpan_ = fullSpan;
}

- (bool)isFullSpan {
  return mFullSpan_;
}

- (int32_t)getSpanIndex {
  if (mSpan_ == nil) {
    return ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
  }
  return mSpan_->mIndex_;
}

- (void)dealloc {
  RELEASE_(mSpan_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_MarginLayoutParams:);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(initWithADXRecyclerView_LayoutParams:);
  methods[4].selector = @selector(setFullSpanWithBoolean:);
  methods[5].selector = @selector(isFullSpan);
  methods[6].selector = @selector(getSpanIndex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_SPAN_ID", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID, 0x19, -1, -1, -1, -1 },
    { "mSpan_", "LADXStaggeredGridLayoutManager_Span;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFullSpan_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_MarginLayoutParams;", "LADViewGroup_LayoutParams;", "LADXRecyclerView_LayoutParams;", "setFullSpan", "Z", "LADXStaggeredGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_LayoutParams = { "LayoutParams", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 7, 3, 6, -1, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_LayoutParams;
}

@end

void ADXStaggeredGridLayoutManager_LayoutParams_initWithInt_withInt_(ADXStaggeredGridLayoutManager_LayoutParams *self, int32_t width, int32_t height) {
  ADXRecyclerView_LayoutParams_initWithInt_withInt_(self, width, height);
}

ADXStaggeredGridLayoutManager_LayoutParams *new_ADXStaggeredGridLayoutManager_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithInt_withInt_, width, height)
}

ADXStaggeredGridLayoutManager_LayoutParams *create_ADXStaggeredGridLayoutManager_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(ADXStaggeredGridLayoutManager_LayoutParams *self, ADViewGroup_MarginLayoutParams *source) {
  ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
}

ADXStaggeredGridLayoutManager_LayoutParams *new_ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithADViewGroup_MarginLayoutParams_, source)
}

ADXStaggeredGridLayoutManager_LayoutParams *create_ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithADViewGroup_MarginLayoutParams_, source)
}

void ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(ADXStaggeredGridLayoutManager_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
}

ADXStaggeredGridLayoutManager_LayoutParams *new_ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXStaggeredGridLayoutManager_LayoutParams *create_ADXStaggeredGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADXStaggeredGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXStaggeredGridLayoutManager_LayoutParams *self, ADXRecyclerView_LayoutParams *source) {
  ADXRecyclerView_LayoutParams_initWithADXRecyclerView_LayoutParams_(self, source);
}

ADXStaggeredGridLayoutManager_LayoutParams *new_ADXStaggeredGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithADXRecyclerView_LayoutParams_, source)
}

ADXStaggeredGridLayoutManager_LayoutParams *create_ADXStaggeredGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LayoutParams, initWithADXRecyclerView_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager_LayoutParams)

@implementation ADXStaggeredGridLayoutManager_Span

- (instancetype)initWithADXStaggeredGridLayoutManager:(ADXStaggeredGridLayoutManager *)outer$
                                              withInt:(int32_t)index {
  ADXStaggeredGridLayoutManager_Span_initWithADXStaggeredGridLayoutManager_withInt_(self, outer$, index);
  return self;
}

- (int32_t)getStartLineWithInt:(int32_t)def {
  if (mCachedStart_ != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    return mCachedStart_;
  }
  if ([((JavaUtilArrayList *) nil_chk(mViews_)) size] == 0) {
    return def;
  }
  [self calculateCachedStart];
  return mCachedStart_;
}

- (void)calculateCachedStart {
  ADView *startView = [((JavaUtilArrayList *) nil_chk(mViews_)) getWithInt:0];
  ADXStaggeredGridLayoutManager_LayoutParams *lp = [self getLayoutParamsWithADView:startView];
  mCachedStart_ = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedStartWithADView:startView];
  if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(this$0_->mLazySpanLookup_)) getFullSpanItemWithInt:[lp getViewLayoutPosition]]);
    if (fsi != nil && fsi->mGapDir_ == ADXLayoutState_LAYOUT_START) {
      mCachedStart_ -= [fsi getGapForSpanWithInt:mIndex_];
    }
  }
}

- (int32_t)getStartLine {
  if (mCachedStart_ != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    return mCachedStart_;
  }
  [self calculateCachedStart];
  return mCachedStart_;
}

- (int32_t)getEndLineWithInt:(int32_t)def {
  if (mCachedEnd_ != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    return mCachedEnd_;
  }
  int32_t size = [((JavaUtilArrayList *) nil_chk(mViews_)) size];
  if (size == 0) {
    return def;
  }
  [self calculateCachedEnd];
  return mCachedEnd_;
}

- (void)calculateCachedEnd {
  ADView *endView = [((JavaUtilArrayList *) nil_chk(mViews_)) getWithInt:[mViews_ size] - 1];
  ADXStaggeredGridLayoutManager_LayoutParams *lp = [self getLayoutParamsWithADView:endView];
  mCachedEnd_ = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedEndWithADView:endView];
  if (((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mFullSpan_) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((ADXStaggeredGridLayoutManager_LazySpanLookup *) nil_chk(this$0_->mLazySpanLookup_)) getFullSpanItemWithInt:[lp getViewLayoutPosition]]);
    if (fsi != nil && fsi->mGapDir_ == ADXLayoutState_LAYOUT_END) {
      mCachedEnd_ += [fsi getGapForSpanWithInt:mIndex_];
    }
  }
}

- (int32_t)getEndLine {
  if (mCachedEnd_ != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    return mCachedEnd_;
  }
  [self calculateCachedEnd];
  return mCachedEnd_;
}

- (void)prependToSpanWithADView:(ADView *)view {
  ADXStaggeredGridLayoutManager_LayoutParams *lp = JreRetainedLocalValue([self getLayoutParamsWithADView:view]);
  JreStrongAssign(&((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpan_, self);
  [((JavaUtilArrayList *) nil_chk(mViews_)) addWithInt:0 withId:view];
  mCachedStart_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  if ([((JavaUtilArrayList *) nil_chk(mViews_)) size] == 1) {
    mCachedEnd_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  }
  if ([lp isItemRemoved] || [lp isItemChanged]) {
    mDeletedSize_ += [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedMeasurementWithADView:view];
  }
}

- (void)appendToSpanWithADView:(ADView *)view {
  ADXStaggeredGridLayoutManager_LayoutParams *lp = JreRetainedLocalValue([self getLayoutParamsWithADView:view]);
  JreStrongAssign(&((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpan_, self);
  [((JavaUtilArrayList *) nil_chk(mViews_)) addWithId:view];
  mCachedEnd_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  if ([((JavaUtilArrayList *) nil_chk(mViews_)) size] == 1) {
    mCachedStart_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  }
  if ([lp isItemRemoved] || [lp isItemChanged]) {
    mDeletedSize_ += [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedMeasurementWithADView:view];
  }
}

- (void)cacheReferenceLineAndClearWithBoolean:(bool)reverseLayout
                                      withInt:(int32_t)offset {
  int32_t reference;
  if (reverseLayout) {
    reference = [self getEndLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
  }
  else {
    reference = [self getStartLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
  }
  [self clear];
  if (reference == ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    return;
  }
  if ((reverseLayout && reference < [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getEndAfterPadding]) || (!reverseLayout && reference > [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getStartAfterPadding])) {
    return;
  }
  if (offset != ADXStaggeredGridLayoutManager_INVALID_OFFSET) {
    reference += offset;
  }
  mCachedStart_ = mCachedEnd_ = reference;
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(mViews_)) clear];
  [self invalidateCache];
  mDeletedSize_ = 0;
}

- (void)invalidateCache {
  mCachedStart_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  mCachedEnd_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
}

- (void)setLineWithInt:(int32_t)line {
  mCachedEnd_ = mCachedStart_ = line;
}

- (void)popEnd {
  int32_t size = [((JavaUtilArrayList *) nil_chk(mViews_)) size];
  ADView *end = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mViews_)) removeWithInt:size - 1]);
  ADXStaggeredGridLayoutManager_LayoutParams *lp = [self getLayoutParamsWithADView:end];
  JreStrongAssign(&((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpan_, nil);
  if ([lp isItemRemoved] || [lp isItemChanged]) {
    mDeletedSize_ -= [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedMeasurementWithADView:end];
  }
  if (size == 1) {
    mCachedStart_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  }
  mCachedEnd_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
}

- (void)popStart {
  ADView *start = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mViews_)) removeWithInt:0]);
  ADXStaggeredGridLayoutManager_LayoutParams *lp = [self getLayoutParamsWithADView:start];
  JreStrongAssign(&((ADXStaggeredGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpan_, nil);
  if ([((JavaUtilArrayList *) nil_chk(mViews_)) size] == 0) {
    mCachedEnd_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  }
  if ([lp isItemRemoved] || [lp isItemChanged]) {
    mDeletedSize_ -= [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedMeasurementWithADView:start];
  }
  mCachedStart_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
}

- (int32_t)getDeletedSize {
  return mDeletedSize_;
}

- (ADXStaggeredGridLayoutManager_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return (ADXStaggeredGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXStaggeredGridLayoutManager_LayoutParams class]);
}

- (void)onOffsetWithInt:(int32_t)dt {
  if (mCachedStart_ != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    mCachedStart_ += dt;
  }
  if (mCachedEnd_ != ADXStaggeredGridLayoutManager_Span_INVALID_LINE) {
    mCachedEnd_ += dt;
  }
}

- (int32_t)findFirstVisibleItemPosition {
  return this$0_->mReverseLayout_ ? [self findOneVisibleChildWithInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1 withInt:-1 withBoolean:false] : [self findOneVisibleChildWithInt:0 withInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] withBoolean:false];
}

- (int32_t)findFirstPartiallyVisibleItemPosition {
  return this$0_->mReverseLayout_ ? [self findOnePartiallyVisibleChildWithInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1 withInt:-1 withBoolean:true] : [self findOnePartiallyVisibleChildWithInt:0 withInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] withBoolean:true];
}

- (int32_t)findFirstCompletelyVisibleItemPosition {
  return this$0_->mReverseLayout_ ? [self findOneVisibleChildWithInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1 withInt:-1 withBoolean:true] : [self findOneVisibleChildWithInt:0 withInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] withBoolean:true];
}

- (int32_t)findLastVisibleItemPosition {
  return this$0_->mReverseLayout_ ? [self findOneVisibleChildWithInt:0 withInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] withBoolean:false] : [self findOneVisibleChildWithInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1 withInt:-1 withBoolean:false];
}

- (int32_t)findLastPartiallyVisibleItemPosition {
  return this$0_->mReverseLayout_ ? [self findOnePartiallyVisibleChildWithInt:0 withInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] withBoolean:true] : [self findOnePartiallyVisibleChildWithInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1 withInt:-1 withBoolean:true];
}

- (int32_t)findLastCompletelyVisibleItemPosition {
  return this$0_->mReverseLayout_ ? [self findOneVisibleChildWithInt:0 withInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] withBoolean:true] : [self findOneVisibleChildWithInt:[((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1 withInt:-1 withBoolean:true];
}

- (int32_t)findOnePartiallyOrCompletelyVisibleChildWithInt:(int32_t)fromIndex
                                                   withInt:(int32_t)toIndex
                                               withBoolean:(bool)completelyVisible
                                               withBoolean:(bool)acceptCompletelyVisible
                                               withBoolean:(bool)acceptEndPointInclusion {
  int32_t start = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getStartAfterPadding];
  int32_t end = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getEndAfterPadding];
  int32_t next = toIndex > fromIndex ? 1 : -1;
  for (int32_t i = fromIndex; i != toIndex; i += next) {
    ADView *child = [((JavaUtilArrayList *) nil_chk(mViews_)) getWithInt:i];
    int32_t childStart = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedStartWithADView:child];
    int32_t childEnd = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getDecoratedEndWithADView:child];
    bool childStartInclusion = acceptEndPointInclusion ? (childStart <= end) : (childStart < end);
    bool childEndInclusion = acceptEndPointInclusion ? (childEnd >= start) : (childEnd > start);
    if (childStartInclusion && childEndInclusion) {
      if (completelyVisible && acceptCompletelyVisible) {
        if (childStart >= start && childEnd <= end) {
          return [this$0_ getPositionWithADView:child];
        }
      }
      else if (acceptCompletelyVisible) {
        return [this$0_ getPositionWithADView:child];
      }
      else if (childStart < start || childEnd > end) {
        return [this$0_ getPositionWithADView:child];
      }
    }
  }
  return ADXRecyclerView_NO_POSITION;
}

- (int32_t)findOneVisibleChildWithInt:(int32_t)fromIndex
                              withInt:(int32_t)toIndex
                          withBoolean:(bool)completelyVisible {
  return [self findOnePartiallyOrCompletelyVisibleChildWithInt:fromIndex withInt:toIndex withBoolean:completelyVisible withBoolean:true withBoolean:false];
}

- (int32_t)findOnePartiallyVisibleChildWithInt:(int32_t)fromIndex
                                       withInt:(int32_t)toIndex
                                   withBoolean:(bool)acceptEndPointInclusion {
  return [self findOnePartiallyOrCompletelyVisibleChildWithInt:fromIndex withInt:toIndex withBoolean:false withBoolean:false withBoolean:acceptEndPointInclusion];
}

- (ADView *)getFocusableViewAfterWithInt:(int32_t)referenceChildPosition
                                 withInt:(int32_t)layoutDir {
  ADView *candidate = nil;
  if (layoutDir == ADXLayoutState_LAYOUT_START) {
    int32_t limit = [((JavaUtilArrayList *) nil_chk(mViews_)) size];
    for (int32_t i = 0; i < limit; i++) {
      ADView *view = [((JavaUtilArrayList *) nil_chk(mViews_)) getWithInt:i];
      if ((this$0_->mReverseLayout_ && [this$0_ getPositionWithADView:view] <= referenceChildPosition) || (!this$0_->mReverseLayout_ && [this$0_ getPositionWithADView:view] >= referenceChildPosition)) {
        break;
      }
      {
        break;
      }
    }
  }
  else {
    for (int32_t i = [((JavaUtilArrayList *) nil_chk(mViews_)) size] - 1; i >= 0; i--) {
      ADView *view = [((JavaUtilArrayList *) nil_chk(mViews_)) getWithInt:i];
      if ((this$0_->mReverseLayout_ && [this$0_ getPositionWithADView:view] >= referenceChildPosition) || (!this$0_->mReverseLayout_ && [this$0_ getPositionWithADView:view] <= referenceChildPosition)) {
        break;
      }
      {
        break;
      }
    }
  }
  return candidate;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mViews_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXStaggeredGridLayoutManager_LayoutParams;", 0x0, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 16, 15, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXStaggeredGridLayoutManager:withInt:);
  methods[1].selector = @selector(getStartLineWithInt:);
  methods[2].selector = @selector(calculateCachedStart);
  methods[3].selector = @selector(getStartLine);
  methods[4].selector = @selector(getEndLineWithInt:);
  methods[5].selector = @selector(calculateCachedEnd);
  methods[6].selector = @selector(getEndLine);
  methods[7].selector = @selector(prependToSpanWithADView:);
  methods[8].selector = @selector(appendToSpanWithADView:);
  methods[9].selector = @selector(cacheReferenceLineAndClearWithBoolean:withInt:);
  methods[10].selector = @selector(clear);
  methods[11].selector = @selector(invalidateCache);
  methods[12].selector = @selector(setLineWithInt:);
  methods[13].selector = @selector(popEnd);
  methods[14].selector = @selector(popStart);
  methods[15].selector = @selector(getDeletedSize);
  methods[16].selector = @selector(getLayoutParamsWithADView:);
  methods[17].selector = @selector(onOffsetWithInt:);
  methods[18].selector = @selector(findFirstVisibleItemPosition);
  methods[19].selector = @selector(findFirstPartiallyVisibleItemPosition);
  methods[20].selector = @selector(findFirstCompletelyVisibleItemPosition);
  methods[21].selector = @selector(findLastVisibleItemPosition);
  methods[22].selector = @selector(findLastPartiallyVisibleItemPosition);
  methods[23].selector = @selector(findLastCompletelyVisibleItemPosition);
  methods[24].selector = @selector(findOnePartiallyOrCompletelyVisibleChildWithInt:withInt:withBoolean:withBoolean:withBoolean:);
  methods[25].selector = @selector(findOneVisibleChildWithInt:withInt:withBoolean:);
  methods[26].selector = @selector(findOnePartiallyVisibleChildWithInt:withInt:withBoolean:);
  methods[27].selector = @selector(getFocusableViewAfterWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXStaggeredGridLayoutManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "INVALID_LINE", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_Span_INVALID_LINE, 0x18, -1, -1, -1, -1 },
    { "mViews_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 19, -1 },
    { "mCachedStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCachedEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDeletedSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXStaggeredGridLayoutManager;I", "getStartLine", "I", "getEndLine", "prependToSpan", "LADView;", "appendToSpan", "cacheReferenceLineAndClear", "ZI", "setLine", "getLayoutParams", "onOffset", "findOnePartiallyOrCompletelyVisibleChild", "IIZZZ", "findOneVisibleChild", "IIZ", "findOnePartiallyVisibleChild", "getFocusableViewAfter", "II", "Ljava/util/ArrayList<Lr/android/view/View;>;", "LADXStaggeredGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_Span = { "Span", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x0, 28, 7, 20, -1, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_Span;
}

@end

void ADXStaggeredGridLayoutManager_Span_initWithADXStaggeredGridLayoutManager_withInt_(ADXStaggeredGridLayoutManager_Span *self, ADXStaggeredGridLayoutManager *outer$, int32_t index) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mViews_, new_JavaUtilArrayList_init());
  self->mCachedStart_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  self->mCachedEnd_ = ADXStaggeredGridLayoutManager_Span_INVALID_LINE;
  self->mDeletedSize_ = 0;
  self->mIndex_ = index;
}

ADXStaggeredGridLayoutManager_Span *new_ADXStaggeredGridLayoutManager_Span_initWithADXStaggeredGridLayoutManager_withInt_(ADXStaggeredGridLayoutManager *outer$, int32_t index) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_Span, initWithADXStaggeredGridLayoutManager_withInt_, outer$, index)
}

ADXStaggeredGridLayoutManager_Span *create_ADXStaggeredGridLayoutManager_Span_initWithADXStaggeredGridLayoutManager_withInt_(ADXStaggeredGridLayoutManager *outer$, int32_t index) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_Span, initWithADXStaggeredGridLayoutManager_withInt_, outer$, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager_Span)

@implementation ADXStaggeredGridLayoutManager_LazySpanLookup

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXStaggeredGridLayoutManager_LazySpanLookup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (int32_t)forceInvalidateAfterWithInt:(int32_t)position {
  if (mFullSpanItems_ != nil) {
    for (int32_t i = [mFullSpanItems_ size] - 1; i >= 0; i--) {
      ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(mFullSpanItems_)) getWithInt:i]);
      if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_ >= position) {
        [((id<JavaUtilList>) nil_chk(mFullSpanItems_)) removeWithInt:i];
      }
    }
  }
  return [self invalidateAfterWithInt:position];
}

- (int32_t)invalidateAfterWithInt:(int32_t)position {
  if (mData_ == nil) {
    return ADXRecyclerView_NO_POSITION;
  }
  if (position >= mData_->size_) {
    return ADXRecyclerView_NO_POSITION;
  }
  int32_t endPosition = ADXStaggeredGridLayoutManager_LazySpanLookup_invalidateFullSpansAfterWithInt_(self, position);
  if (endPosition == ADXRecyclerView_NO_POSITION) {
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(mData_, position, ((IOSIntArray *) nil_chk(mData_))->size_, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
    return ((IOSIntArray *) nil_chk(mData_))->size_;
  }
  else {
    int32_t invalidateToIndex = JavaLangMath_minWithInt_withInt_(endPosition + 1, ((IOSIntArray *) nil_chk(mData_))->size_);
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(mData_, position, invalidateToIndex, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
    return invalidateToIndex;
  }
}

- (int32_t)getSpanWithInt:(int32_t)position {
  if (mData_ == nil || position >= mData_->size_) {
    return ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
  }
  else {
    return IOSIntArray_Get(mData_, position);
  }
}

- (void)setSpanWithInt:(int32_t)position
withADXStaggeredGridLayoutManager_Span:(ADXStaggeredGridLayoutManager_Span *)span {
  [self ensureSizeWithInt:position];
  *IOSIntArray_GetRef(nil_chk(mData_), position) = ((ADXStaggeredGridLayoutManager_Span *) nil_chk(span))->mIndex_;
}

- (int32_t)sizeForPositionWithInt:(int32_t)position {
  int32_t len = ((IOSIntArray *) nil_chk(mData_))->size_;
  while (len <= position) {
    len *= 2;
  }
  return len;
}

- (void)ensureSizeWithInt:(int32_t)position {
  if (mData_ == nil) {
    JreStrongAssignAndConsume(&mData_, [IOSIntArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(position, ADXStaggeredGridLayoutManager_LazySpanLookup_MIN_SIZE) + 1]);
    JavaUtilArrays_fillWithIntArray_withInt_(mData_, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
  }
  else if (position >= mData_->size_) {
    IOSIntArray *old = mData_;
    JreStrongAssignAndConsume(&mData_, [IOSIntArray newArrayWithLength:[self sizeForPositionWithInt:position]]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(old, 0, mData_, 0, old->size_);
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(mData_, old->size_, ((IOSIntArray *) nil_chk(mData_))->size_, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
  }
}

- (void)clear {
  if (mData_ != nil) {
    JavaUtilArrays_fillWithIntArray_withInt_(mData_, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
  }
  JreStrongAssign(&mFullSpanItems_, nil);
}

- (void)offsetForRemovalWithInt:(int32_t)positionStart
                        withInt:(int32_t)itemCount {
  if (mData_ == nil || positionStart >= mData_->size_) {
    return;
  }
  [self ensureSizeWithInt:positionStart + itemCount];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mData_, positionStart + itemCount, mData_, positionStart, ((IOSIntArray *) nil_chk(mData_))->size_ - positionStart - itemCount);
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(mData_, ((IOSIntArray *) nil_chk(mData_))->size_ - itemCount, mData_->size_, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
  ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForRemovalWithInt_withInt_(self, positionStart, itemCount);
}

- (void)offsetFullSpansForRemovalWithInt:(int32_t)positionStart
                                 withInt:(int32_t)itemCount {
  ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForRemovalWithInt_withInt_(self, positionStart, itemCount);
}

- (void)offsetForAdditionWithInt:(int32_t)positionStart
                         withInt:(int32_t)itemCount {
  if (mData_ == nil || positionStart >= mData_->size_) {
    return;
  }
  [self ensureSizeWithInt:positionStart + itemCount];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mData_, positionStart, mData_, positionStart + itemCount, ((IOSIntArray *) nil_chk(mData_))->size_ - positionStart - itemCount);
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(mData_, positionStart, positionStart + itemCount, ADXStaggeredGridLayoutManager_LayoutParams_INVALID_SPAN_ID);
  ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForAdditionWithInt_withInt_(self, positionStart, itemCount);
}

- (void)offsetFullSpansForAdditionWithInt:(int32_t)positionStart
                                  withInt:(int32_t)itemCount {
  ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForAdditionWithInt_withInt_(self, positionStart, itemCount);
}

- (int32_t)invalidateFullSpansAfterWithInt:(int32_t)position {
  return ADXStaggeredGridLayoutManager_LazySpanLookup_invalidateFullSpansAfterWithInt_(self, position);
}

- (void)addFullSpanItemWithADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem:(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)fullSpanItem {
  if (mFullSpanItems_ == nil) {
    JreStrongAssignAndConsume(&mFullSpanItems_, new_JavaUtilArrayList_init());
  }
  int32_t size = [mFullSpanItems_ size];
  for (int32_t i = 0; i < size; i++) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *other = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(mFullSpanItems_)) getWithInt:i]);
    if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(other))->mPosition_ == ((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fullSpanItem))->mPosition_) {
      {
        [((id<JavaUtilList>) nil_chk(mFullSpanItems_)) removeWithInt:i];
      }
    }
    if (other->mPosition_ >= fullSpanItem->mPosition_) {
      [((id<JavaUtilList>) nil_chk(mFullSpanItems_)) addWithInt:i withId:fullSpanItem];
      return;
    }
  }
  [((id<JavaUtilList>) nil_chk(mFullSpanItems_)) addWithId:fullSpanItem];
}

- (ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)getFullSpanItemWithInt:(int32_t)position {
  if (mFullSpanItems_ == nil) {
    return nil;
  }
  for (int32_t i = [mFullSpanItems_ size] - 1; i >= 0; i--) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = [((id<JavaUtilList>) nil_chk(mFullSpanItems_)) getWithInt:i];
    if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_ == position) {
      return fsi;
    }
  }
  return nil;
}

- (ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *)getFirstFullSpanItemInRangeWithInt:(int32_t)minPos
                                                                                          withInt:(int32_t)maxPos
                                                                                          withInt:(int32_t)gapDir
                                                                                      withBoolean:(bool)hasUnwantedGapAfter {
  if (mFullSpanItems_ == nil) {
    return nil;
  }
  int32_t limit = [mFullSpanItems_ size];
  for (int32_t i = 0; i < limit; i++) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(mFullSpanItems_)) getWithInt:i]);
    if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_ >= maxPos) {
      return nil;
    }
    if (fsi->mPosition_ >= minPos && (gapDir == 0 || fsi->mGapDir_ == gapDir || (hasUnwantedGapAfter && fsi->mHasUnwantedGapAfter_))) {
      return fsi;
    }
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(mData_);
  RELEASE_(mFullSpanItems_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem;", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "LADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem;", 0x1, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forceInvalidateAfterWithInt:);
  methods[2].selector = @selector(invalidateAfterWithInt:);
  methods[3].selector = @selector(getSpanWithInt:);
  methods[4].selector = @selector(setSpanWithInt:withADXStaggeredGridLayoutManager_Span:);
  methods[5].selector = @selector(sizeForPositionWithInt:);
  methods[6].selector = @selector(ensureSizeWithInt:);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(offsetForRemovalWithInt:withInt:);
  methods[9].selector = @selector(offsetFullSpansForRemovalWithInt:withInt:);
  methods[10].selector = @selector(offsetForAdditionWithInt:withInt:);
  methods[11].selector = @selector(offsetFullSpansForAdditionWithInt:withInt:);
  methods[12].selector = @selector(invalidateFullSpansAfterWithInt:);
  methods[13].selector = @selector(addFullSpanItemWithADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem:);
  methods[14].selector = @selector(getFullSpanItemWithInt:);
  methods[15].selector = @selector(getFirstFullSpanItemInRangeWithInt:withInt:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_SIZE", "I", .constantValue.asInt = ADXStaggeredGridLayoutManager_LazySpanLookup_MIN_SIZE, 0x1a, -1, -1, -1, -1 },
    { "mData_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFullSpanItems_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "forceInvalidateAfter", "I", "invalidateAfter", "getSpan", "setSpan", "ILADXStaggeredGridLayoutManager_Span;", "sizeForPosition", "ensureSize", "offsetForRemoval", "II", "offsetFullSpansForRemoval", "offsetForAddition", "offsetFullSpansForAddition", "invalidateFullSpansAfter", "addFullSpanItem", "LADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem;", "getFullSpanItem", "getFirstFullSpanItemInRange", "IIIZ", "Ljava/util/List<Landroidx/recyclerview/widget/StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem;>;", "LADXStaggeredGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_LazySpanLookup = { "LazySpanLookup", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 16, 3, 20, 15, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_LazySpanLookup;
}

@end

void ADXStaggeredGridLayoutManager_LazySpanLookup_init(ADXStaggeredGridLayoutManager_LazySpanLookup *self) {
  NSObject_init(self);
}

ADXStaggeredGridLayoutManager_LazySpanLookup *new_ADXStaggeredGridLayoutManager_LazySpanLookup_init() {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LazySpanLookup, init)
}

ADXStaggeredGridLayoutManager_LazySpanLookup *create_ADXStaggeredGridLayoutManager_LazySpanLookup_init() {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LazySpanLookup, init)
}

void ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForRemovalWithInt_withInt_(ADXStaggeredGridLayoutManager_LazySpanLookup *self, int32_t positionStart, int32_t itemCount) {
  if (self->mFullSpanItems_ == nil) {
    return;
  }
  int32_t end = positionStart + itemCount;
  for (int32_t i = [self->mFullSpanItems_ size] - 1; i >= 0; i--) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) getWithInt:i]);
    if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_ < positionStart) {
      continue;
    }
    if (fsi->mPosition_ < end) {
      [((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) removeWithInt:i];
    }
    else {
      fsi->mPosition_ -= itemCount;
    }
  }
}

void ADXStaggeredGridLayoutManager_LazySpanLookup_offsetFullSpansForAdditionWithInt_withInt_(ADXStaggeredGridLayoutManager_LazySpanLookup *self, int32_t positionStart, int32_t itemCount) {
  if (self->mFullSpanItems_ == nil) {
    return;
  }
  for (int32_t i = [self->mFullSpanItems_ size] - 1; i >= 0; i--) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) getWithInt:i]);
    if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_ < positionStart) {
      continue;
    }
    fsi->mPosition_ += itemCount;
  }
}

int32_t ADXStaggeredGridLayoutManager_LazySpanLookup_invalidateFullSpansAfterWithInt_(ADXStaggeredGridLayoutManager_LazySpanLookup *self, int32_t position) {
  if (self->mFullSpanItems_ == nil) {
    return ADXRecyclerView_NO_POSITION;
  }
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *item = [self getFullSpanItemWithInt:position];
  if (item != nil) {
    [((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) removeWithId:item];
  }
  int32_t nextFsiIndex = -1;
  int32_t count = [((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) size];
  for (int32_t i = 0; i < count; i++) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) getWithInt:i]);
    if (((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_ >= position) {
      nextFsiIndex = i;
      break;
    }
  }
  if (nextFsiIndex != -1) {
    ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *fsi = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) getWithInt:nextFsiIndex]);
    [((id<JavaUtilList>) nil_chk(self->mFullSpanItems_)) removeWithInt:nextFsiIndex];
    return ((ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *) nil_chk(fsi))->mPosition_;
  }
  return ADXRecyclerView_NO_POSITION;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager_LazySpanLookup)

@implementation ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem

- (instancetype)initWithADParcel:(id<ADParcel>)inArg {
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_initWithADParcel_(self, inArg);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (int32_t)getGapForSpanWithInt:(int32_t)spanIndex {
  return mGapPerSpan_ == nil ? 0 : IOSIntArray_Get(mGapPerSpan_, spanIndex);
}

- (int32_t)describeContents {
  return 0;
}

- (void)writeToParcelWithADParcel:(id<ADParcel>)dest
                          withInt:(int32_t)flags {
  if (mGapPerSpan_ != nil && mGapPerSpan_->size_ > 0) {
  }
  else {
  }
}

- (NSString *)description {
  return JreStrcat("$I$I$Z$$C", @"FullSpanItem{mPosition=", mPosition_, @", mGapDir=", mGapDir_, @", mHasUnwantedGapAfter=", mHasUnwantedGapAfter_, @", mGapPerSpan=", JavaUtilArrays_toStringWithIntArray_(mGapPerSpan_), '}');
}

- (void)dealloc {
  RELEASE_(mGapPerSpan_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADParcel:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getGapForSpanWithInt:);
  methods[3].selector = @selector(describeContents);
  methods[4].selector = @selector(writeToParcelWithADParcel:withInt:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGapDir_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGapPerSpan_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHasUnwantedGapAfter_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADParcel;", "getGapForSpan", "I", "writeToParcel", "LADParcel;I", "toString", "LADXStaggeredGridLayoutManager_LazySpanLookup;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem = { "FullSpanItem", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 6, 4, 6, -1, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem;
}

@end

void ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_initWithADParcel_(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *self, id<ADParcel> inArg) {
  NSObject_init(self);
  self->mPosition_ = 0;
  self->mGapDir_ = 0;
  self->mHasUnwantedGapAfter_ = (0 == 1);
  int32_t spanCount = 0;
  if (spanCount > 0) {
    JreStrongAssignAndConsume(&self->mGapPerSpan_, [IOSIntArray newArrayWithLength:spanCount]);
    [((id<ADParcel>) nil_chk(inArg)) readIntArrayWithIntArray:self->mGapPerSpan_];
  }
}

ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *new_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_initWithADParcel_(id<ADParcel> inArg) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem, initWithADParcel_, inArg)
}

ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *create_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_initWithADParcel_(id<ADParcel> inArg) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem, initWithADParcel_, inArg)
}

void ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_init(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *self) {
  NSObject_init(self);
}

ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *new_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_init() {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem, init)
}

ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem *create_ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_init() {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem)

@implementation ADXStaggeredGridLayoutManager_SavedState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXStaggeredGridLayoutManager_SavedState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADParcel:(id<ADParcel>)inArg {
  ADXStaggeredGridLayoutManager_SavedState_initWithADParcel_(self, inArg);
  return self;
}

- (instancetype)initWithADXStaggeredGridLayoutManager_SavedState:(ADXStaggeredGridLayoutManager_SavedState *)other {
  ADXStaggeredGridLayoutManager_SavedState_initWithADXStaggeredGridLayoutManager_SavedState_(self, other);
  return self;
}

- (void)invalidateSpanInfo {
  JreStrongAssign(&mSpanOffsets_, nil);
  mSpanOffsetsSize_ = 0;
  mSpanLookupSize_ = 0;
  JreStrongAssign(&mSpanLookup_, nil);
  JreStrongAssign(&mFullSpanItems_, nil);
}

- (void)invalidateAnchorPositionInfo {
  JreStrongAssign(&mSpanOffsets_, nil);
  mSpanOffsetsSize_ = 0;
  mAnchorPosition_ = ADXRecyclerView_NO_POSITION;
  mVisibleAnchorPosition_ = ADXRecyclerView_NO_POSITION;
}

- (int32_t)describeContents {
  return 0;
}

- (void)writeToParcelWithADParcel:(id<ADParcel>)dest
                          withInt:(int32_t)flags {
  if (mSpanOffsetsSize_ > 0) {
  }
  if (mSpanLookupSize_ > 0) {
  }
  [((id<ADParcel>) nil_chk(dest)) writeListWithJavaUtilList:mFullSpanItems_];
}

- (void)dealloc {
  RELEASE_(mSpanOffsets_);
  RELEASE_(mSpanLookup_);
  RELEASE_(mFullSpanItems_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithADParcel:);
  methods[2].selector = @selector(initWithADXStaggeredGridLayoutManager_SavedState:);
  methods[3].selector = @selector(invalidateSpanInfo);
  methods[4].selector = @selector(invalidateAnchorPositionInfo);
  methods[5].selector = @selector(describeContents);
  methods[6].selector = @selector(writeToParcelWithADParcel:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAnchorPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVisibleAnchorPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanOffsetsSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanOffsets_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanLookupSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanLookup_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFullSpanItems_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "mReverseLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAnchorLayoutFromEnd_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastLayoutRTL_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADParcel;", "LADXStaggeredGridLayoutManager_SavedState;", "writeToParcel", "LADParcel;I", "Ljava/util/List<Landroidx/recyclerview/widget/StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem;>;", "LADXStaggeredGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_SavedState = { "SavedState", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 7, 10, 5, -1, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_SavedState;
}

@end

void ADXStaggeredGridLayoutManager_SavedState_init(ADXStaggeredGridLayoutManager_SavedState *self) {
  NSObject_init(self);
}

ADXStaggeredGridLayoutManager_SavedState *new_ADXStaggeredGridLayoutManager_SavedState_init() {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_SavedState, init)
}

ADXStaggeredGridLayoutManager_SavedState *create_ADXStaggeredGridLayoutManager_SavedState_init() {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_SavedState, init)
}

void ADXStaggeredGridLayoutManager_SavedState_initWithADParcel_(ADXStaggeredGridLayoutManager_SavedState *self, id<ADParcel> inArg) {
  NSObject_init(self);
  self->mAnchorPosition_ = 0;
  self->mVisibleAnchorPosition_ = 0;
  self->mSpanOffsetsSize_ = 0;
  if (self->mSpanOffsetsSize_ > 0) {
    JreStrongAssignAndConsume(&self->mSpanOffsets_, [IOSIntArray newArrayWithLength:self->mSpanOffsetsSize_]);
    [((id<ADParcel>) nil_chk(inArg)) readIntArrayWithIntArray:self->mSpanOffsets_];
  }
  self->mSpanLookupSize_ = 0;
  if (self->mSpanLookupSize_ > 0) {
    JreStrongAssignAndConsume(&self->mSpanLookup_, [IOSIntArray newArrayWithLength:self->mSpanLookupSize_]);
    [((id<ADParcel>) nil_chk(inArg)) readIntArrayWithIntArray:self->mSpanLookup_];
  }
  self->mReverseLayout_ = (0 == 1);
  self->mAnchorLayoutFromEnd_ = (0 == 1);
  self->mLastLayoutRTL_ = (0 == 1);
  id<JavaUtilList> fullSpanItems = JreRetainedLocalValue([((id<ADParcel>) nil_chk(inArg)) readArrayListWithJavaLangClassLoader:[ADXStaggeredGridLayoutManager_LazySpanLookup_FullSpanItem_class_() getClassLoader]]);
  JreStrongAssign(&self->mFullSpanItems_, fullSpanItems);
}

ADXStaggeredGridLayoutManager_SavedState *new_ADXStaggeredGridLayoutManager_SavedState_initWithADParcel_(id<ADParcel> inArg) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_SavedState, initWithADParcel_, inArg)
}

ADXStaggeredGridLayoutManager_SavedState *create_ADXStaggeredGridLayoutManager_SavedState_initWithADParcel_(id<ADParcel> inArg) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_SavedState, initWithADParcel_, inArg)
}

void ADXStaggeredGridLayoutManager_SavedState_initWithADXStaggeredGridLayoutManager_SavedState_(ADXStaggeredGridLayoutManager_SavedState *self, ADXStaggeredGridLayoutManager_SavedState *other) {
  NSObject_init(self);
  self->mSpanOffsetsSize_ = ((ADXStaggeredGridLayoutManager_SavedState *) nil_chk(other))->mSpanOffsetsSize_;
  self->mAnchorPosition_ = other->mAnchorPosition_;
  self->mVisibleAnchorPosition_ = other->mVisibleAnchorPosition_;
  JreStrongAssign(&self->mSpanOffsets_, other->mSpanOffsets_);
  self->mSpanLookupSize_ = other->mSpanLookupSize_;
  JreStrongAssign(&self->mSpanLookup_, other->mSpanLookup_);
  self->mReverseLayout_ = other->mReverseLayout_;
  self->mAnchorLayoutFromEnd_ = other->mAnchorLayoutFromEnd_;
  self->mLastLayoutRTL_ = other->mLastLayoutRTL_;
  JreStrongAssign(&self->mFullSpanItems_, other->mFullSpanItems_);
}

ADXStaggeredGridLayoutManager_SavedState *new_ADXStaggeredGridLayoutManager_SavedState_initWithADXStaggeredGridLayoutManager_SavedState_(ADXStaggeredGridLayoutManager_SavedState *other) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_SavedState, initWithADXStaggeredGridLayoutManager_SavedState_, other)
}

ADXStaggeredGridLayoutManager_SavedState *create_ADXStaggeredGridLayoutManager_SavedState_initWithADXStaggeredGridLayoutManager_SavedState_(ADXStaggeredGridLayoutManager_SavedState *other) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_SavedState, initWithADXStaggeredGridLayoutManager_SavedState_, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager_SavedState)

@implementation ADXStaggeredGridLayoutManager_AnchorInfo

- (instancetype)initWithADXStaggeredGridLayoutManager:(ADXStaggeredGridLayoutManager *)outer$ {
  ADXStaggeredGridLayoutManager_AnchorInfo_initWithADXStaggeredGridLayoutManager_(self, outer$);
  return self;
}

- (void)reset {
  mPosition_ = ADXRecyclerView_NO_POSITION;
  mOffset_ = ADXStaggeredGridLayoutManager_INVALID_OFFSET;
  mLayoutFromEnd_ = false;
  mInvalidateOffsets_ = false;
  mValid_ = false;
  if (mSpanReferenceLines_ != nil) {
    JavaUtilArrays_fillWithIntArray_withInt_(mSpanReferenceLines_, -1);
  }
}

- (void)saveSpanReferenceLinesWithADXStaggeredGridLayoutManager_SpanArray:(IOSObjectArray *)spans {
  int32_t spanCount = ((IOSObjectArray *) nil_chk(spans))->size_;
  if (mSpanReferenceLines_ == nil || mSpanReferenceLines_->size_ < spanCount) {
    JreStrongAssignAndConsume(&mSpanReferenceLines_, [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(this$0_->mSpans_))->size_]);
  }
  for (int32_t i = 0; i < spanCount; i++) {
    *IOSIntArray_GetRef(nil_chk(mSpanReferenceLines_), i) = [((ADXStaggeredGridLayoutManager_Span *) nil_chk(IOSObjectArray_Get(spans, i))) getStartLineWithInt:ADXStaggeredGridLayoutManager_Span_INVALID_LINE];
  }
}

- (void)assignCoordinateFromPadding {
  mOffset_ = mLayoutFromEnd_ ? [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getEndAfterPadding] : [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getStartAfterPadding];
}

- (void)assignCoordinateFromPaddingWithInt:(int32_t)addedDistance {
  if (mLayoutFromEnd_) {
    mOffset_ = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getEndAfterPadding] - addedDistance;
  }
  else {
    mOffset_ = [((ADXOrientationHelper *) nil_chk(this$0_->mPrimaryOrientation_)) getStartAfterPadding] + addedDistance;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mSpanReferenceLines_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXStaggeredGridLayoutManager:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(saveSpanReferenceLinesWithADXStaggeredGridLayoutManager_SpanArray:);
  methods[3].selector = @selector(assignCoordinateFromPadding);
  methods[4].selector = @selector(assignCoordinateFromPaddingWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXStaggeredGridLayoutManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutFromEnd_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInvalidateOffsets_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValid_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanReferenceLines_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXStaggeredGridLayoutManager;", "saveSpanReferenceLines", "[LADXStaggeredGridLayoutManager_Span;", "assignCoordinateFromPadding", "I" };
  static const J2ObjcClassInfo _ADXStaggeredGridLayoutManager_AnchorInfo = { "AnchorInfo", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x0, 5, 7, 0, -1, -1, -1, -1 };
  return &_ADXStaggeredGridLayoutManager_AnchorInfo;
}

@end

void ADXStaggeredGridLayoutManager_AnchorInfo_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager_AnchorInfo *self, ADXStaggeredGridLayoutManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  [self reset];
}

ADXStaggeredGridLayoutManager_AnchorInfo *new_ADXStaggeredGridLayoutManager_AnchorInfo_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager *outer$) {
  J2OBJC_NEW_IMPL(ADXStaggeredGridLayoutManager_AnchorInfo, initWithADXStaggeredGridLayoutManager_, outer$)
}

ADXStaggeredGridLayoutManager_AnchorInfo *create_ADXStaggeredGridLayoutManager_AnchorInfo_initWithADXStaggeredGridLayoutManager_(ADXStaggeredGridLayoutManager *outer$) {
  J2OBJC_CREATE_IMPL(ADXStaggeredGridLayoutManager_AnchorInfo, initWithADXStaggeredGridLayoutManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXStaggeredGridLayoutManager_AnchorInfo)
